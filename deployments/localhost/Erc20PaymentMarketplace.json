{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexOfOfferMapping",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceOffer",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "CancelledOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "counterofferId",
          "type": "uint256"
        }
      ],
      "name": "CounterofferMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "CounterofferTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NFTListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "NFTPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NFTSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "OfferMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RootWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royalty",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyPayment",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "indexOfOfferMapping",
          "type": "uint256"
        }
      ],
      "name": "cancelOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "changePriceOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRatio",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "floorRatio",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fusyBenefitsAccumulated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "counterofferId",
          "type": "uint256"
        }
      ],
      "name": "getCounteroffer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expirationDate",
              "type": "uint64"
            }
          ],
          "internalType": "struct IMarketplace.Counteroffer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "getCounteroffer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expirationDate",
              "type": "uint64"
            }
          ],
          "internalType": "struct IMarketplace.Counteroffer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "netPayment",
          "type": "uint256"
        }
      ],
      "name": "getFusyonaFeeFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNftInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "listed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalOffers",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMarketplace.NftInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "getOffer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isInitialized",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expirationDate",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "counterofferId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMarketplace.Offer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "isListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "list",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "durationInDays",
          "type": "uint64"
        }
      ],
      "name": "makeCounteroffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "durationInDays",
          "type": "uint64"
        }
      ],
      "name": "makeOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "minPriceOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "percentage",
          "type": "uint8"
        }
      ],
      "name": "setFeeRatioFromPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "percentage",
          "type": "uint8"
        }
      ],
      "name": "setFloorRatioFromPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "supportsRoyalties",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "takeCounteroffer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "indexOfOfferMapping",
          "type": "uint256"
        }
      ],
      "name": "takeOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcc1a0e077bc1faea4a93eeeba24b7bc0b6ed77de2148bc6abd4af7fd5dd6e395",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "4819422",
    "logsBloom": "0x
    "blockHash": "0x6ff43ae68221b48b0e35ba749c82aff893031a88ecb8b4982e19211488f05082",
    "transactionHash": "0xcc1a0e077bc1faea4a93eeeba24b7bc0b6ed77de2148bc6abd4af7fd5dd6e395",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0xcc1a0e077bc1faea4a93eeeba24b7bc0b6ed77de2148bc6abd4af7fd5dd6e395",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6ff43ae68221b48b0e35ba749c82aff893031a88ecb8b4982e19211488f05082"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "4819422",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "numDeployments": 1,
  "solcInputHash": "58323ec5de95cf2641200dd0c259ba57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfOfferMapping\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceOffer\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"CancelledOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"counterofferId\",\"type\":\"uint256\"}],\"name\":\"CounterofferMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"CounterofferTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NFTListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"NFTPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NFTSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"OfferMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RootWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPayment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOfOfferMapping\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changePriceOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRatio\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorRatio\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fusyBenefitsAccumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"counterofferId\",\"type\":\"uint256\"}],\"name\":\"getCounteroffer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"expirationDate\",\"type\":\"uint64\"}],\"internalType\":\"struct IMarketplace.Counteroffer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"getCounteroffer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"expirationDate\",\"type\":\"uint64\"}],\"internalType\":\"struct IMarketplace.Counteroffer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"netPayment\",\"type\":\"uint256\"}],\"name\":\"getFusyonaFeeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNftInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalOffers\",\"type\":\"uint256\"}],\"internalType\":\"struct IMarketplace.NftInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isInitialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"expirationDate\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"counterofferId\",\"type\":\"uint256\"}],\"internalType\":\"struct IMarketplace.Offer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"isListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"durationInDays\",\"type\":\"uint64\"}],\"name\":\"makeCounteroffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"durationInDays\",\"type\":\"uint64\"}],\"name\":\"makeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"minPriceOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"setFeeRatioFromPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"setFloorRatioFromPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"supportsRoyalties\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"takeCounteroffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOfOfferMapping\",\"type\":\"uint256\"}],\"name\":\"takeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Erc20PaymentMarketplace.sol\":\"Erc20PaymentMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x6ac3ebc0fe0ac3a70a561aa19210b49af9aa530b89ebb1cdc8a5901aabf7212e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Erc20PaymentMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Marketplace.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./IErc20PaymentMarketplace.sol\\\";\\n\\ncontract Erc20PaymentMarketplace is Marketplace, IErc20PaymentMarketplace {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private immutable erc20;\\n\\n    constructor(address erc20_) {\\n        erc20 = IERC20(erc20_);\\n    }\\n\\n    function makeOffer(\\n        address collection,\\n        uint256 nftId,\\n        uint256 offerPrice,\\n        uint64 durationInDays\\n    ) external override {\\n        _makeOffer(collection, nftId, offerPrice, durationInDays);\\n    }\\n\\n    function _transfer(address to, uint256 amount) internal override {\\n        erc20.safeTransfer(to, amount);\\n    }\\n\\n    function _ensureAndGetPaymentFor(\\n        uint256 amount\\n    ) internal override returns (uint256) {\\n        erc20.safeTransferFrom(msg.sender, address(this), amount);\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xc76e3d49ba10a45e63a49631b3bf6f97fee5b1c188d1265ac3ed00356cc3090a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/IErc20PaymentMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMarketplace.sol\\\";\\n\\ninterface IErc20PaymentMarketplace is IMarketplace {\\n    function makeOffer(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 offerPrice,\\n        uint64 durationInDays\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5b0c49f5eab25321040c4cb5e5a3b56c875dc3c145a0708ad4aad0a148f8fc0e\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/IMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.0;\\n\\ninterface IMarketplace {\\n    function list(address collection, uint256 tokenId, uint256 price) external;\\n\\n    function isListed (\\n        address collection,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    function getNftInfo(\\n        address collection,\\n        uint256 tokenId\\n    ) external view returns (NftInfo calldata);\\n\\n    struct NftInfo {\\n        bool listed;\\n        uint256 price;\\n        address seller;\\n        uint256 totalOffers;\\n    }\\n\\n    function changePriceOf(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 newPrice\\n    ) external;\\n\\n    function buy(address collection, uint256 tokenId) external payable;\\n\\n    function getOffer(\\n        address collection,\\n        uint256 nftId,\\n        uint256 offerId\\n    ) external view returns (Offer calldata);\\n\\n    struct Offer {\\n        bool isInitialized;\\n        address buyer;\\n        uint256 price;\\n        uint64 expirationDate;\\n        uint256 counterofferId;\\n    }\\n\\n    function cancelOffer(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 indexOfOfferMapping\\n    ) external;\\n\\n    function takeOffer(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 indexOfOfferMapping\\n    ) external;\\n\\n    function makeCounteroffer(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 offerId,\\n        uint256 newPriceOffer,\\n        uint64 durationInDays\\n    ) external;\\n\\n    function getCounteroffer(\\n        address collection,\\n        uint256 nftId,\\n        uint256 offerId\\n    ) external view returns (Counteroffer calldata);\\n\\n    function getCounteroffer(\\n        uint256 counterofferId\\n    ) external view returns (Counteroffer calldata);\\n\\n    struct Counteroffer {\\n        address collection;\\n        uint256 nftId;\\n        uint256 offerId;\\n        uint256 price;\\n        uint64 expirationDate;\\n    }\\n\\n    function takeCounteroffer(uint256 id) external payable;\\n\\n    function getFusyonaFeeFor(uint256 price) external view returns (uint256);\\n\\n    function setFeeRatioFromPercentage(uint8 percentage) external;\\n\\n    function feeRatio() external view returns (int128);\\n\\n    function withdraw() external;\\n\\n    function setFloorRatioFromPercentage(uint8 percentage) external;\\n\\n    function floorRatio() external view returns (int128);\\n\\n    function fusyBenefitsAccumulated() external view returns (uint256);\\n\\n    event NFTListed(\\n        address indexed seller,\\n        address indexed collection,\\n        uint256 nftId,\\n        uint256 price\\n    );\\n    event NFTSold(\\n        address indexed buyer,\\n        address indexed seller,\\n        address indexed collection,\\n        uint256 nftId,\\n        uint256 price\\n    );\\n    event OfferMade(\\n        address indexed buyer,\\n        address indexed collection,\\n        uint256 indexed nftId,\\n        uint256 offerId\\n    );\\n    event CounterofferMade(\\n        address indexed collection,\\n        uint256 indexed nftId,\\n        uint256 indexed offerId,\\n        uint256 counterofferId\\n    );\\n    event CounterofferTaken(\\n        uint256 indexed id,\\n        uint256 price,\\n        address indexed seller\\n    );\\n    event RootWithdrawal(address indexed beneficiary, uint256 amount);\\n    event NFTPriceChanged(\\n        address indexed collection,\\n        uint256 indexed nftId,\\n        uint256 newPrice\\n    );\\n    event CancelledOffer(\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 indexOfOfferMapping,\\n        uint256 priceOffer,\\n        address indexed buyer\\n    );\\n\\n    event RoyaltyPayment(\\n        address indexed collection, \\n        uint256 indexed tokenId, \\n        address indexed beneficiary, \\n        uint256 royalty\\n    );\\n}\\n\",\"keccak256\":\"0x000ab5162d817edff2a8440a65be94912427f1bd5e3217605d7f030b6f655646\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IMarketplace} from \\\"./IMarketplace.sol\\\";\\nimport {ABDKMath64x64} from \\\"./libraries/ABDKMath64x64.sol\\\";\\nimport {MathFees} from \\\"./libraries/MathFees.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {ERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nabstract contract Marketplace is\\n    IMarketplace,\\n    ERC1155Holder,\\n    Ownable,\\n    ERC721Holder\\n{\\n    using ABDKMath64x64 for int128;\\n    using MathFees for int128;\\n\\n    struct NFTForSale {\\n        bool listed;\\n        uint256 price;\\n        address seller;\\n        mapping(uint256 => Offer) offers;\\n        uint256 totalOffers;\\n    }\\n\\n    int128 public feeRatio = MathFees._npercent(int128(2));\\n    int128 public floorRatio = MathFees._npercent(int128(20));\\n\\n    uint256 internal constant ONE_COPY = 1;\\n    uint64 internal constant ONE_DAY_IN_SECONDS = uint64(24 * 60 * 60);\\n    uint256 internal constant NO_COUNTER_OFFER = 0;\\n\\n    uint256 public fusyBenefitsAccumulated;\\n\\n    mapping(address => mapping(uint256 => NFTForSale)) internal nftsListed;\\n\\n    Counteroffer[] counteroffers;\\n\\n    constructor() {}\\n\\n    receive() external payable {}\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC1155Receiver) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function cancelOffer(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 indexOfOfferMapping\\n    ) external override {\\n        _cancelOfferRequirements(collection, tokenId, indexOfOfferMapping);\\n        Offer storage offer = nftsListed[collection][tokenId].offers[\\n            indexOfOfferMapping\\n        ];\\n        offer.isInitialized = false;\\n        uint256 moneyToRebase = offer.price;\\n        address buyer = offer.buyer;\\n        _transfer(buyer, moneyToRebase);\\n        emit CancelledOffer(\\n            collection,\\n            tokenId,\\n            indexOfOfferMapping,\\n            moneyToRebase,\\n            buyer\\n        );\\n    }\\n\\n    function _cancelOfferRequirements(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 indexOfOfferMapping\\n    ) private view {\\n        NFTForSale storage nft = nftsListed[collection][tokenId];\\n        require(\\n            nft.totalOffers > indexOfOfferMapping,\\n            \\\"Marketplace: Offer not found\\\"\\n        );\\n        Offer memory offer = nftsListed[collection][tokenId].offers[\\n            indexOfOfferMapping\\n        ];\\n        require(msg.sender == offer.buyer, \\\"Marketplace: Wrong Buyer\\\");\\n        require(\\n            offer.isInitialized,\\n            \\\"Marketplace: Offer already was cancelled\\\"\\n        );\\n    }\\n\\n    function _transfer(address to, uint256 amount) internal virtual;\\n\\n    function withdraw() external override onlyOwner {\\n        require(\\n            fusyBenefitsAccumulated > 0,\\n            \\\"Marketplace: Nothing to withdraw.\\\"\\n        );\\n        uint256 amountToWithdraw = fusyBenefitsAccumulated;\\n        fusyBenefitsAccumulated = 0;\\n        _transfer(owner(), amountToWithdraw);\\n        emit RootWithdrawal(owner(), amountToWithdraw);\\n    }\\n\\n    function setFeeRatioFromPercentage(\\n        uint8 percentage\\n    ) external override onlyOwner {\\n        require(\\n            percentage <= 100,\\n            \\\"Marketplace: Percentage must be less or equal than 100\\\"\\n        );\\n        int128 newFeeRatio = MathFees._npercent(int128(uint128(percentage)));\\n        require(\\n            feeRatio != newFeeRatio,\\n            \\\"Marketplace: New percentage is the same as the current one\\\"\\n        );\\n        feeRatio = newFeeRatio;\\n    }\\n\\n    function takeOffer(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 indexOfOfferMapping\\n    ) external override {\\n        NFTForSale storage nft = nftsListed[collection][tokenId];\\n        Offer storage offer = nft.offers[indexOfOfferMapping];\\n        _takeOfferRequirements(nft, offer, indexOfOfferMapping);\\n        address seller = nft.seller;\\n        address buyer = offer.buyer;\\n        uint256 price = offer.price;\\n        nft.listed = false;\\n        offer.isInitialized = false;\\n        _trade(buyer, seller, collection, tokenId, price);\\n    }\\n\\n    function _takeOfferRequirements(\\n        NFTForSale storage nft,\\n        Offer memory offer,\\n        uint256 indexOfOfferMapping\\n    ) private view {\\n        address seller = nft.seller;\\n        bool listed = nft.listed;\\n        uint256 totalOffers = nft.totalOffers;\\n        uint64 expirationDate = offer.expirationDate;\\n        require(\\n            msg.sender == seller,\\n            \\\"Marketplace: Sender should be the seller\\\"\\n        );\\n        require(listed, \\\"Marketplace: NFT not found\\\");\\n        require(\\n            totalOffers > indexOfOfferMapping,\\n            \\\"Marketplace: Offer doesn't exist\\\"\\n        );\\n        require(offer.isInitialized, \\\"Marketplace: Offer was used\\\");\\n        require(\\n            expirationDate >= block.timestamp,\\n            \\\"Marketplace: Offer expired\\\"\\n        );\\n    }\\n\\n    function _trade(\\n        address buyer,\\n        address seller,\\n        address collection,\\n        uint256 nftId,\\n        uint256 priceOfTrade\\n    ) private {\\n        uint256 royalties = _payRoyaltiesIfSupported(\\n            collection,\\n            nftId,\\n            priceOfTrade\\n        );\\n        _payingBenefits(seller, priceOfTrade, royalties);\\n        _safeTransferTo(buyer, collection, nftId);\\n        emit NFTSold(buyer, seller, collection, nftId, priceOfTrade);\\n    }\\n\\n    function _payingBenefits(\\n        address seller,\\n        uint256 moneyRequired,\\n        uint256 royalties\\n    ) private {\\n        uint256 fusyonaFee = getFusyonaFeeFor(moneyRequired);\\n        fusyBenefitsAccumulated += fusyonaFee;\\n        _transfer(seller, moneyRequired - fusyonaFee - royalties);\\n    }\\n\\n    function _payRoyaltiesIfSupported(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) private returns (uint256) {\\n        if (!supportsRoyalties(collection)) return 0;\\n\\n        (address creator, uint256 royalty) = royaltyInfo(\\n            collection,\\n            tokenId,\\n            salePrice\\n        );\\n        _transfer(creator, royalty);\\n        emit RoyaltyPayment(collection, tokenId, creator, royalty);\\n        return royalty;\\n    }\\n\\n    function supportsRoyalties(address collection) public view returns (bool) {\\n        bytes4 INTERFACE_ID_ERC2981 = 0x2a55205a;\\n        return\\n            ERC165Checker.supportsInterface(collection, INTERFACE_ID_ERC2981);\\n    }\\n\\n    function royaltyInfo(\\n        address collection,\\n        uint256 nftId,\\n        uint256 salePrice\\n    ) public view returns (address, uint256) {\\n        IERC2981 ierc2981 = IERC2981(collection);\\n        return ierc2981.royaltyInfo(nftId, salePrice);\\n    }\\n\\n    function getFusyonaFeeFor(\\n        uint256 netPayment\\n    ) public view returns (uint256) {\\n        return feeRatio.mulu(netPayment);\\n    }\\n\\n    function _safeTransferTo(\\n        address to,\\n        address collection,\\n        uint nftId\\n    ) private {\\n        if (_is1155(collection))\\n            _safeTransfer_1155(collection, nftId, address(this), to);\\n        else _safeTransfer_721(collection, nftId, address(this), to);\\n    }\\n\\n    function _makeOffer(\\n        address collection,\\n        uint256 nftId,\\n        uint256 offerPrice_,\\n        uint64 durationInDays\\n    ) internal {\\n        uint256 offerPrice = _ensureAndGetPaymentFor(offerPrice_);\\n        _makeOfferRequirements(collection, nftId, offerPrice);\\n\\n        address buyer = msg.sender;\\n        Offer memory offer = Offer({\\n            isInitialized: true,\\n            buyer: buyer,\\n            price: offerPrice,\\n            expirationDate: uint64(block.timestamp) +\\n                durationInDays *\\n                ONE_DAY_IN_SECONDS,\\n            counterofferId: NO_COUNTER_OFFER\\n        });\\n        NFTForSale storage nft = nftsListed[collection][nftId];\\n        uint256 offerId = nft.totalOffers;\\n        nft.offers[offerId] = offer;\\n        nft.totalOffers += 1;\\n        emit OfferMade(buyer, collection, nftId, offerId);\\n    }\\n\\n    function _ensureAndGetPaymentFor(\\n        uint256 amount\\n    ) internal virtual returns (uint256);\\n\\n    function _makeOfferRequirements(\\n        address collection,\\n        uint256 nftId,\\n        uint256 priceOffer\\n    ) private view {\\n        require(\\n            priceOffer >= minPriceOffer(collection, nftId),\\n            \\\"Marketplace: Price must be greater or equal than the minimum offer price for that NFT (call minPriceOffer())\\\"\\n        );\\n        require(isListed(collection, nftId), \\\"Marketplace: NFT not listed\\\");\\n    }\\n\\n    function minPriceOffer(\\n        address collection,\\n        uint256 nftId\\n    ) public view returns (uint256) {\\n        NFTForSale storage nft = nftsListed[collection][nftId];\\n        uint256 currentPrice = nft.price;\\n        return (currentPrice - floorRatio.mulu(currentPrice));\\n    }\\n\\n    function buy(address collection, uint256 nftId) external payable override {\\n        NFTForSale storage nft = nftsListed[collection][nftId];\\n        address seller = nft.seller;\\n        uint256 moneyRequired = nft.price;\\n        uint256 moneyReceived = _ensureAndGetPaymentFor(moneyRequired);\\n\\n        require(nft.listed, \\\"Marketplace: NFT not listed\\\");\\n\\n        nft.listed = false;\\n        _transferRemainingToSender(moneyReceived, moneyRequired);\\n        _trade(msg.sender, seller, collection, nftId, moneyRequired);\\n    }\\n\\n    function _transferRemainingToSender(\\n        uint256 moneyReceived,\\n        uint256 moneyRequired\\n    ) private {\\n        uint256 remaining = moneyReceived - moneyRequired;\\n        if (remaining > 0) {\\n            payable(msg.sender).transfer(remaining);\\n        }\\n    }\\n\\n    function list(\\n        address collection,\\n        uint256 nftId,\\n        uint256 price\\n    ) external override {\\n        require(\\n            !isListed(collection, nftId),\\n            \\\"Marketplace: NFT already listed\\\"\\n        );\\n        bool isErc1155 = _is1155(collection);\\n        require(\\n            isErc1155\\n                ? _senderIsOwnerOf1155Nft(collection, nftId)\\n                : _senderIsOwnerOf721Nft(collection, nftId),\\n            \\\"Marketplace: You don't own the NFT\\\"\\n        );\\n        require(price > 0, \\\"Marketplace: Price must be greater than 0\\\");\\n\\n        address seller = msg.sender;\\n\\n        if (isErc1155) _safeTransferFromSender_1155(collection, nftId);\\n        else _safeTransferFromSender_721(collection, nftId);\\n\\n        NFTForSale storage newNFTforListing = nftsListed[collection][nftId];\\n        newNFTforListing.listed = true;\\n        newNFTforListing.price = price;\\n        newNFTforListing.seller = seller;\\n        emit NFTListed(seller, collection, nftId, price);\\n    }\\n\\n    function isListed(\\n        address collection,\\n        uint256 nftId\\n    ) public view returns (bool) {\\n        NFTForSale storage nftTarget = nftsListed[collection][nftId];\\n        return nftTarget.listed;\\n    }\\n\\n    function _is1155(address _contract) private view returns (bool) {\\n        bytes4 _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n        return\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                _contract,\\n                _INTERFACE_ID_ERC1155\\n            );\\n    }\\n\\n    function _senderIsOwnerOf1155Nft(\\n        address collection,\\n        uint256 nftId\\n    ) private view returns (bool) {\\n        IERC1155 ierc1155 = IERC1155(collection);\\n        return ierc1155.balanceOf(msg.sender, nftId) > 0;\\n    }\\n\\n    function _senderIsOwnerOf721Nft(\\n        address collection,\\n        uint256 nftId\\n    ) private view returns (bool) {\\n        IERC721 ierc721 = IERC721(collection);\\n        return ierc721.ownerOf(nftId) == msg.sender;\\n    }\\n\\n    function _safeTransferFromSender_1155(\\n        address collection,\\n        uint nftId\\n    ) private {\\n        _safeTransfer_1155(collection, nftId, msg.sender, address(this));\\n    }\\n\\n    function _safeTransfer_1155(\\n        address collection,\\n        uint nftId,\\n        address from,\\n        address to\\n    ) private {\\n        IERC1155 ierc1155 = IERC1155(collection);\\n        ierc1155.safeTransferFrom(from, to, nftId, ONE_COPY, \\\"\\\");\\n    }\\n\\n    function _safeTransferFromSender_721(\\n        address collection,\\n        uint nftId\\n    ) private {\\n        _safeTransfer_721(collection, nftId, msg.sender, address(this));\\n    }\\n\\n    function _safeTransfer_721(\\n        address collection,\\n        uint nftId,\\n        address from,\\n        address to\\n    ) private {\\n        IERC721 ierc721 = IERC721(collection);\\n        ierc721.safeTransferFrom(from, to, nftId);\\n    }\\n\\n    function makeCounteroffer(\\n        address collection,\\n        uint256 nftId,\\n        uint256 offerId,\\n        uint256 newPrice,\\n        uint64 durationInDays\\n    ) external override {\\n        NFTForSale storage nft = nftsListed[collection][nftId];\\n        Offer storage offer = nft.offers[offerId];\\n        _makeCounterofferRequirements(nft, offer, newPrice);\\n\\n        uint256 counterofferId = _saveCounteroffer(\\n            collection,\\n            nftId,\\n            offerId,\\n            newPrice,\\n            durationInDays,\\n            offer\\n        );\\n        emit CounterofferMade(collection, nftId, offerId, counterofferId);\\n    }\\n\\n    function _makeCounterofferRequirements(\\n        NFTForSale storage nft,\\n        Offer storage offer,\\n        uint256 newPriceOffer\\n    ) private view {\\n        require(nft.listed, \\\"Marketplace: NFT not listed\\\");\\n        require(offer.isInitialized, \\\"Marketplace: Offer not found\\\");\\n        require(\\n            newPriceOffer > offer.price,\\n            \\\"Marketplace: Price must be greater than offer\\\"\\n        );\\n        require(\\n            newPriceOffer < nft.price,\\n            \\\"Marketplace: Price must be less than NFT price\\\"\\n        );\\n        require(\\n            offer.expirationDate >= block.timestamp,\\n            \\\"Marketplace: Offer expired\\\"\\n        );\\n        require(\\n            msg.sender == nft.seller,\\n            \\\"Marketplace: You aren't selling the NFT\\\"\\n        );\\n        require(\\n            _hasNotCounteroffer(offer),\\n            \\\"Marketplace: Counteroffer already exists\\\"\\n        );\\n    }\\n\\n    function _hasNotCounteroffer(\\n        Offer storage offer\\n    ) private view returns (bool) {\\n        return offer.counterofferId == NO_COUNTER_OFFER;\\n    }\\n\\n    function _saveCounteroffer(\\n        address collection,\\n        uint256 nftId,\\n        uint256 offerId,\\n        uint256 newPrice,\\n        uint64 durationInDays,\\n        Offer storage offer\\n    ) private returns (uint256 counterofferId) {\\n        counteroffers.push(\\n            Counteroffer({\\n                collection: collection,\\n                nftId: nftId,\\n                offerId: offerId,\\n                price: newPrice,\\n                expirationDate: uint64(block.timestamp) +\\n                    durationInDays *\\n                    ONE_DAY_IN_SECONDS\\n            })\\n        );\\n\\n        counterofferId = counteroffers.length;\\n        offer.counterofferId = counterofferId;\\n    }\\n\\n    function getCounteroffer(\\n        address collection,\\n        uint256 nftId,\\n        uint256 offerId\\n    ) external view returns (Counteroffer memory) {\\n        Offer memory offer = getOffer(collection, nftId, offerId);\\n        return _getCounterOfferById(offer.counterofferId);\\n    }\\n\\n    function getOffer(\\n        address collection,\\n        uint256 nftId,\\n        uint256 offerId\\n    ) public view returns (Offer memory) {\\n        return nftsListed[collection][nftId].offers[offerId];\\n    }\\n\\n    function _getCounterOfferById(\\n        uint256 id\\n    ) private view returns (Counteroffer memory) {\\n        return counteroffers[id - 1];\\n    }\\n\\n    function getCounteroffer(\\n        uint256 counterofferId\\n    ) external view returns (Counteroffer memory) {\\n        require(\\n            counterofferId > 0 && counterofferId <= counteroffers.length,\\n            \\\"Marketplace: Counteroffer not found\\\"\\n        );\\n        return _getCounterOfferById(counterofferId);\\n    }\\n\\n    function takeCounteroffer(uint256 id) external payable override {\\n        _takeCounterofferRequirements(id);\\n\\n        Offer memory offer = _getOfferByCounterofferId(id);\\n        Counteroffer memory counteroffer = _getCounterOfferById(id);\\n        NFTForSale storage nft = nftsListed[counteroffer.collection][\\n            counteroffer.nftId\\n        ];\\n\\n        uint256 minAmountToPay = counteroffer.price - offer.price;\\n        uint256 receivedPayment = _ensureAndGetPaymentFor(minAmountToPay);\\n\\n        nft.listed = false;\\n        _transferRemainingToSender(receivedPayment, minAmountToPay);\\n\\n        address seller = nft.seller;\\n        _trade(\\n            msg.sender,\\n            seller,\\n            counteroffer.collection,\\n            counteroffer.nftId,\\n            counteroffer.price\\n        );\\n        emit CounterofferTaken(id, counteroffer.price, seller);\\n    }\\n\\n    function _takeCounterofferRequirements(uint256 id) private view {\\n        require(id > 0, \\\"Marketplace: Counteroffer not found\\\");\\n        require(\\n            id <= counteroffers.length,\\n            \\\"Marketplace: Counteroffer not found\\\"\\n        );\\n        Offer memory offer = _getOfferByCounterofferId(id);\\n        require(\\n            offer.buyer == msg.sender,\\n            \\\"Marketplace: You didn't make the offer\\\"\\n        );\\n        Counteroffer memory counteroffer = _getCounterOfferById(id);\\n        require(\\n            counteroffer.expirationDate > block.timestamp,\\n            \\\"Marketplace: Counteroffer expired\\\"\\n        );\\n    }\\n\\n    function _getOfferByCounterofferId(\\n        uint256 id\\n    ) private view returns (Offer memory) {\\n        Counteroffer memory counteroffer = _getCounterOfferById(id);\\n        address collection = counteroffer.collection;\\n        uint256 nftId = counteroffer.nftId;\\n        uint256 offerId = counteroffer.offerId;\\n\\n        return getOffer(collection, nftId, offerId);\\n    }\\n\\n    function changePriceOf(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 newPrice\\n    ) external override {\\n        NFTForSale storage nft = nftsListed[collection][tokenId];\\n        _changePriceRequirements(nft, newPrice);\\n\\n        nft.price = newPrice;\\n\\n        emit NFTPriceChanged(collection, tokenId, newPrice);\\n    }\\n\\n    function _changePriceRequirements(\\n        NFTForSale storage nft,\\n        uint256 newPrice\\n    ) private view {\\n        require(nft.listed, \\\"Marketplace: NFT not listed\\\");\\n        require(\\n            msg.sender == nft.seller,\\n            \\\"Marketplace: You aren't selling the NFT\\\"\\n        );\\n        require(\\n            newPrice != nft.price,\\n            \\\"Marketplace: New price is the same as current price\\\"\\n        );\\n    }\\n\\n    function setFloorRatioFromPercentage(uint8 percentage) external onlyOwner {\\n        require(\\n            percentage <= 100,\\n            \\\"Marketplace: Percentage must be less or equal than 100\\\"\\n        );\\n\\n        int128 newFloorRatio = MathFees._npercent(int128(uint128(percentage)));\\n        require(\\n            newFloorRatio != floorRatio,\\n            \\\"Marketplace: New percentage is the same as the current one\\\"\\n        );\\n\\n        floorRatio = newFloorRatio;\\n    }\\n\\n    function getNftInfo(\\n        address collection,\\n        uint256 tokenId\\n    ) external view returns (NftInfo memory) {\\n        NFTForSale storage nft = nftsListed[collection][tokenId];\\n        return\\n            NftInfo({\\n                listed: nft.listed,\\n                price: nft.price,\\n                seller: nft.seller,\\n                totalOffers: nft.totalOffers\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xa414e0db42c1130a4fdaad5571b8075b4facc854af008833b033380ae5390f01\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/libraries/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(x << 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt(int128 x) internal pure returns (int64) {\\n        unchecked {\\n            return int64(x >> 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(int256(x << 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        unchecked {\\n            require(x >= 0);\\n            return uint64(uint128(x >> 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = x >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128(int128 x) internal pure returns (int256) {\\n        unchecked {\\n            return int256(x) << 64;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) + y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) - y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = (int256(x) * y) >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\n        unchecked {\\n            if (x == MIN_64x64) {\\n                require(\\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n                        y <= 0x1000000000000000000000000000000000000000000000000\\n                );\\n                return -y << 63;\\n            } else {\\n                bool negativeResult = false;\\n                if (x < 0) {\\n                    x = -x;\\n                    negativeResult = true;\\n                }\\n                if (y < 0) {\\n                    y = -y; // We rely on overflow behavior here\\n                    negativeResult = !negativeResult;\\n                }\\n                uint256 absoluteResult = mulu(x, uint256(y));\\n                if (negativeResult) {\\n                    require(\\n                        absoluteResult <=\\n                            0x8000000000000000000000000000000000000000000000000000000000000000\\n                    );\\n                    return -int256(absoluteResult); // We rely on overflow behavior here\\n                } else {\\n                    require(\\n                        absoluteResult <=\\n                            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                    );\\n                    return int256(absoluteResult);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) return 0;\\n\\n            require(x >= 0);\\n\\n            uint256 lo = (uint256(int256(x)) *\\n                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            hi <<= 64;\\n\\n            require(\\n                hi <=\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\n                        lo\\n            );\\n            return hi + lo;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            int256 result = (int256(x) << 64) / y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x; // We rely on overflow behavior here\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\\n            if (negativeResult) {\\n                require(absoluteResult <= 0x80000000000000000000000000000000);\\n                return -int128(absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(absoluteResult); // We rely on overflow behavior here\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            uint128 result = divuu(x, y);\\n            require(result <= uint128(MAX_64x64));\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return -x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != 0);\\n            int256 result = int256(0x100000000000000000000000000000000) / x;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            return int128((int256(x) + int256(y)) >> 1);\\n        }\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 m = int256(x) * int256(y);\\n            require(m >= 0);\\n            require(\\n                m <\\n                    0x4000000000000000000000000000000000000000000000000000000000000000\\n            );\\n            return int128(sqrtu(uint256(m)));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            bool negative = x < 0 && y & 1 == 1;\\n\\n            uint256 absX = uint128(x < 0 ? -x : x);\\n            uint256 absResult;\\n            absResult = 0x100000000000000000000000000000000;\\n\\n            if (absX <= 0x10000000000000000) {\\n                absX <<= 63;\\n                while (y != 0) {\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x2 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x4 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x8 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    y >>= 4;\\n                }\\n\\n                absResult >>= 64;\\n            } else {\\n                uint256 absXShift = 63;\\n                if (absX < 0x1000000000000000000000000) {\\n                    absX <<= 32;\\n                    absXShift -= 32;\\n                }\\n                if (absX < 0x10000000000000000000000000000) {\\n                    absX <<= 16;\\n                    absXShift -= 16;\\n                }\\n                if (absX < 0x1000000000000000000000000000000) {\\n                    absX <<= 8;\\n                    absXShift -= 8;\\n                }\\n                if (absX < 0x10000000000000000000000000000000) {\\n                    absX <<= 4;\\n                    absXShift -= 4;\\n                }\\n                if (absX < 0x40000000000000000000000000000000) {\\n                    absX <<= 2;\\n                    absXShift -= 2;\\n                }\\n                if (absX < 0x80000000000000000000000000000000) {\\n                    absX <<= 1;\\n                    absXShift -= 1;\\n                }\\n\\n                uint256 resultShift = 0;\\n                while (y != 0) {\\n                    require(absXShift < 64);\\n\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                        resultShift += absXShift;\\n                        if (absResult > 0x100000000000000000000000000000000) {\\n                            absResult >>= 1;\\n                            resultShift += 1;\\n                        }\\n                    }\\n                    absX = (absX * absX) >> 127;\\n                    absXShift <<= 1;\\n                    if (absX >= 0x100000000000000000000000000000000) {\\n                        absX >>= 1;\\n                        absXShift += 1;\\n                    }\\n\\n                    y >>= 1;\\n                }\\n\\n                require(resultShift < 64);\\n                absResult >>= 64 - resultShift;\\n            }\\n            int256 result = negative ? -int256(absResult) : int256(absResult);\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= 0);\\n            return int128(sqrtu(uint256(int256(x)) << 64));\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            int256 msb = 0;\\n            int256 xc = x;\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 result = (msb - 64) << 64;\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n                ux *= ux;\\n                uint256 b = ux >> 255;\\n                ux >>= 127 + b;\\n                result += bit * int256(b);\\n            }\\n\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            return\\n                int128(\\n                    int256(\\n                        (uint256(int256(log_2(x))) *\\n                            0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\n                    )\\n                );\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0)\\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            if (x & 0x4000000000000000 > 0)\\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n            if (x & 0x2000000000000000 > 0)\\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n            if (x & 0x1000000000000000 > 0)\\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n            if (x & 0x800000000000000 > 0)\\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n            if (x & 0x400000000000000 > 0)\\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n            if (x & 0x200000000000000 > 0)\\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n            if (x & 0x100000000000000 > 0)\\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n            if (x & 0x80000000000000 > 0)\\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n            if (x & 0x40000000000000 > 0)\\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n            if (x & 0x20000000000000 > 0)\\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n            if (x & 0x10000000000000 > 0)\\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n            if (x & 0x8000000000000 > 0)\\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n            if (x & 0x4000000000000 > 0)\\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n            if (x & 0x2000000000000 > 0)\\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n            if (x & 0x1000000000000 > 0)\\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n            if (x & 0x800000000000 > 0)\\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n            if (x & 0x400000000000 > 0)\\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n            if (x & 0x200000000000 > 0)\\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            if (x & 0x100000000000 > 0)\\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            if (x & 0x80000000000 > 0)\\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n            if (x & 0x40000000000 > 0)\\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n            if (x & 0x20000000000 > 0)\\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n            if (x & 0x10000000000 > 0)\\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n            if (x & 0x8000000000 > 0)\\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n            if (x & 0x4000000000 > 0)\\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n            if (x & 0x2000000000 > 0)\\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n            if (x & 0x1000000000 > 0)\\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n            if (x & 0x800000000 > 0)\\n                result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n            if (x & 0x400000000 > 0)\\n                result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n            if (x & 0x200000000 > 0)\\n                result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n            if (x & 0x100000000 > 0)\\n                result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            if (x & 0x80000000 > 0)\\n                result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n            if (x & 0x40000000 > 0)\\n                result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n            if (x & 0x20000000 > 0)\\n                result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            if (x & 0x10000000 > 0)\\n                result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n            if (x & 0x8000000 > 0)\\n                result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n            if (x & 0x4000000 > 0)\\n                result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n            if (x & 0x2000000 > 0)\\n                result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            if (x & 0x1000000 > 0)\\n                result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n            if (x & 0x800000 > 0)\\n                result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n            if (x & 0x400000 > 0)\\n                result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n            if (x & 0x200000 > 0)\\n                result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n            if (x & 0x100000 > 0)\\n                result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n            if (x & 0x80000 > 0)\\n                result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n            if (x & 0x40000 > 0)\\n                result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n            if (x & 0x20000 > 0)\\n                result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n            if (x & 0x10000 > 0)\\n                result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n            if (x & 0x8000 > 0)\\n                result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n            if (x & 0x4000 > 0)\\n                result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n            if (x & 0x2000 > 0)\\n                result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            if (x & 0x1000 > 0)\\n                result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            if (x & 0x800 > 0)\\n                result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            if (x & 0x400 > 0)\\n                result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            if (x & 0x200 > 0)\\n                result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n            if (x & 0x100 > 0)\\n                result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            if (x & 0x80 > 0)\\n                result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n            if (x & 0x40 > 0)\\n                result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            if (x & 0x20 > 0)\\n                result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            if (x & 0x10 > 0)\\n                result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            if (x & 0x8 > 0)\\n                result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n            if (x & 0x4 > 0)\\n                result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n            if (x & 0x2 > 0)\\n                result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n            if (x & 0x1 > 0)\\n                result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n            result >>= uint256(int256(63 - (x >> 64)));\\n            require(result <= uint256(int256(MAX_64x64)));\\n\\n            return int128(int256(result));\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            return\\n                exp_2(\\n                    int128(\\n                        (int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\\n                    )\\n                );\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 result;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                result = (x << 64) / y;\\n            else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 hi = result * (y >> 128);\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                assert(xh == hi >> 128);\\n\\n                result += xl / y;\\n            }\\n\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return uint128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\n        unchecked {\\n            if (x == 0) return 0;\\n            else {\\n                uint256 xx = x;\\n                uint256 r = 1;\\n                if (xx >= 0x100000000000000000000000000000000) {\\n                    xx >>= 128;\\n                    r <<= 64;\\n                }\\n                if (xx >= 0x10000000000000000) {\\n                    xx >>= 64;\\n                    r <<= 32;\\n                }\\n                if (xx >= 0x100000000) {\\n                    xx >>= 32;\\n                    r <<= 16;\\n                }\\n                if (xx >= 0x10000) {\\n                    xx >>= 16;\\n                    r <<= 8;\\n                }\\n                if (xx >= 0x100) {\\n                    xx >>= 8;\\n                    r <<= 4;\\n                }\\n                if (xx >= 0x10) {\\n                    xx >>= 4;\\n                    r <<= 2;\\n                }\\n                if (xx >= 0x4) {\\n                    r <<= 1;\\n                }\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1; // Seven iterations should be enough\\n                uint256 r1 = x / r;\\n                return uint128(r < r1 ? r : r1);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9e756491eedd92d816bce8e117d17ccc81231f8e5c83e4247cd3c79aa8621526\",\"license\":\"BSD-4-Clause\"},\"contracts/libraries/MathFees.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nlibrary MathFees {\\n    function _verifyFeeRatioBounds(\\n        int128 _percentageMultipliedBy2Up64AndTwoDecimals\\n    ) internal pure returns (bool) {\\n        require(\\n            _percentageMultipliedBy2Up64AndTwoDecimals > 0 &&\\n                _percentageMultipliedBy2Up64AndTwoDecimals <=\\n                _getMaxValueStoredInUint128(),\\n            \\\"Math: Value of feeRatio is out of bound.\\\"\\n        );\\n        require(\\n            _getRemainderOfUint128(\\n                _percentageMultipliedBy2Up64AndTwoDecimals\\n            ) == 0,\\n            \\\"Math: You need to encode the argument as: percentage*100*2^64.\\\"\\n        );\\n        return true;\\n    }\\n\\n    function _getMaxValueStoredInUint128() internal pure returns (int128) {\\n        return int128(0x7fffffffffffffffffffffffffffffff);\\n    }\\n\\n    function _getRemainderOfUint128(\\n        int128 _percentageMultipliedBy2Up64AndTwoDecimals\\n    ) internal pure returns (int128) {\\n        require(\\n            _percentageMultipliedBy2Up64AndTwoDecimals > 0,\\n            \\\"Math: Value should be greater than 0.\\\"\\n        );\\n        int128 denominator = 2 ** 64;\\n        return _percentageMultipliedBy2Up64AndTwoDecimals % denominator;\\n    }\\n\\n    function _computeFeeRatio(\\n        int128 _percentageMultipliedBy2Up64AndTwoDecimals\\n    ) internal pure returns (int128) {\\n        return ((_percentageMultipliedBy2Up64AndTwoDecimals /\\n            _twoDecimalsPerPercentageInput()) / int128(100));\\n    }\\n\\n    function _npercent(int128 percent) internal pure returns (int128) {\\n        return (percent * int128(2 ** 64)) / int128(100);\\n    }\\n\\n    function _twoDecimalsPerPercentageInput() private pure returns (int128) {\\n        return int128(100);\\n    }\\n}\\n\",\"keccak256\":\"0x2e3933471ed11c88c9bca4b5ef0530bc22a2e0c12ac8d9b1a7393b8d4030177f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101d15760003560e01c806384d8cf20116100f7578063bc197c8111610095578063dda342bb11610064578063dda342bb146106c2578063f23a6e61146106eb578063f2fde38b14610728578063fe4f0dde14610751576101d8565b8063bc197c81146105ef578063cce7ec131461062c578063cdb3cd2514610648578063dbde383014610685576101d8565b80638ed457e0116100d15780638ed457e01461052e57806392e3a5d6146105595780639ccc3fc714610596578063a5e51355146105d3576101d8565b806384d8cf201461049d5780638a82626f146104c65780638da5cb5b14610503576101d8565b806341744dd41161016f5780636425cb051161013e5780636425cb05146103f7578063715018a614610434578063730ed93b1461044b5780637766ba9214610474576101d8565b806341744dd41461032857806345348a8c1461035357806350e9950314610390578063538bd5ea146103b9576101d8565b8063150b7a02116101ab578063150b7a021461028057806320546607146102bd57806329a1a8f2146102e85780633ccfd60b14610311576101d8565b806301ffc9a7146101dd5780630b75e33b1461021a5780630e030d6a14610257576101d8565b366101d857005b600080fd5b3480156101e957600080fd5b5061020460048036038101906101ff91906136dc565b61077a565b6040516102119190613724565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c919061379d565b61078c565b60405161024e9190613724565b60405180910390f35b34801561026357600080fd5b5061027e60048036038101906102799190613800565b6107ab565b005b34801561028c57600080fd5b506102a760048036038101906102a29190613999565b6108e7565b6040516102b49190613a2b565b60405180910390f35b3480156102c957600080fd5b506102d26108fb565b6040516102df9190613a55565b60405180910390f35b3480156102f457600080fd5b5061030f600480360381019061030a9190613aa9565b610901565b005b34801561031d57600080fd5b506103266109f7565b005b34801561033457600080fd5b5061033d610abc565b60405161034a9190613af2565b60405180910390f35b34801561035f57600080fd5b5061037a60048036038101906103759190613b0d565b610acf565b6040516103879190613bcf565b60405180910390f35b34801561039c57600080fd5b506103b760048036038101906103b29190613c2a565b610baa565b005b3480156103c557600080fd5b506103e060048036038101906103db9190613800565b610c8e565b6040516103ee929190613cb4565b60405180910390f35b34801561040357600080fd5b5061041e60048036038101906104199190613800565b610d1e565b60405161042b9190613d54565b60405180910390f35b34801561044057600080fd5b50610449610e55565b005b34801561045757600080fd5b50610472600480360381019061046d9190613d6f565b610e69565b005b34801561048057600080fd5b5061049b60048036038101906104969190613800565b610e7b565b005b3480156104a957600080fd5b506104c460048036038101906104bf9190613800565b610f37565b005b3480156104d257600080fd5b506104ed60048036038101906104e89190613dd6565b61111d565b6040516104fa9190613e6b565b60405180910390f35b34801561050f57600080fd5b50610518611189565b6040516105259190613e86565b60405180910390f35b34801561053a57600080fd5b506105436111b2565b6040516105509190613af2565b60405180910390f35b34801561056557600080fd5b50610580600480360381019061057b9190613b0d565b6111c5565b60405161058d9190613a55565b60405180910390f35b3480156105a257600080fd5b506105bd60048036038101906105b89190613800565b61125d565b6040516105ca9190613e6b565b60405180910390f35b6105ed60048036038101906105e89190613dd6565b61128b565b005b3480156105fb57600080fd5b5061061660048036038101906106119190613f69565b6113f4565b6040516106239190613a2b565b60405180910390f35b61064660048036038101906106419190613b0d565b611409565b005b34801561065457600080fd5b5061066f600480360381019061066a9190613b0d565b611529565b60405161067c9190613724565b60405180910390f35b34801561069157600080fd5b506106ac60048036038101906106a79190613dd6565b611599565b6040516106b99190613a55565b60405180910390f35b3480156106ce57600080fd5b506106e960048036038101906106e49190613800565b6115c7565b005b3480156106f757600080fd5b50610712600480360381019061070d9190614038565b611810565b60405161071f9190613a2b565b60405180910390f35b34801561073457600080fd5b5061074f600480360381019061074a919061379d565b611825565b005b34801561075d57600080fd5b5061077860048036038101906107739190613aa9565b6118a8565b005b6000610785826119c8565b9050919050565b600080632a55205a60e01b90506107a38382611a42565b915050919050565b6107b6838383611a67565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206003016000838152602001908152602001600020905060008160000160006101000a81548160ff02191690831515021790555060008160010154905060008260000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506108778183611ce8565b8073ffffffffffffffffffffffffffffffffffffffff16858773ffffffffffffffffffffffffffffffffffffffff167f728d55bc695c93d61e4428fa1324993d6ae3da4efa718b13361fa0d70fd53eaf87866040516108d79291906140cf565b60405180910390a4505050505050565b600063150b7a0260e01b9050949350505050565b60025481565b610909611d37565b60648160ff161115610950576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109479061417b565b60405180910390fd5b600061095e8260ff1661199e565b9050600160109054906101000a9004600f0b600f0b81600f0b036109b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ae9061420d565b60405180910390fd5b80600160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff1602179055505050565b6109ff611d37565b600060025411610a44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3b9061429f565b60405180910390fd5b600060025490506000600281905550610a64610a5e611189565b82611ce8565b610a6c611189565b73ffffffffffffffffffffffffffffffffffffffff167f4a5596857f699aca8f90f020d443f83690ee93f5c4e147e3353a22c79da0506f82604051610ab19190613a55565b60405180910390a250565b600160009054906101000a9004600f0b81565b610ad7613590565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020905060405180608001604052808260000160009054906101000a900460ff1615158152602001826001015481526020018260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826004015481525091505092915050565b6000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020905060008160030160008681526020019081526020016000209050610c22828286611db5565b6000610c32888888888887612027565b905085878973ffffffffffffffffffffffffffffffffffffffff167f26754258c853565574afb716245befc7213e9016fa1d4eef5cda7d8508acc15784604051610c7c9190613a55565b60405180910390a45050505050505050565b60008060008590508073ffffffffffffffffffffffffffffffffffffffff16632a55205a86866040518363ffffffff1660e01b8152600401610cd19291906140cf565b6040805180830381865afa158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1191906142e9565b9250925050935093915050565b610d266135d0565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060030160008381526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160038201548152505090509392505050565b610e5d611d37565b610e676000612165565b565b610e7584848484612229565b50505050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000209050610ed9818361245b565b818160010181905550828473ffffffffffffffffffffffffffffffffffffffff167f8fc4ddb47ef20cd66b81525933f0644f462c23d7783cd012c20bc360d4458a5584604051610f299190613a55565b60405180910390a350505050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002090506000816003016000848152602001908152602001600020905061107182826040518060a00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160038201548152505085612588565b60008260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008360010154905060008560000160006101000a81548160ff02191690831515021790555060008460000160006101000a81548160ff02191690831515021790555061111382848a8a85612763565b5050505050505050565b611125613621565b60008211801561113a57506004805490508211155b611179576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111709061439b565b60405180910390fd5b6111828261280e565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160109054906101000a9004600f0b81565b600080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020905060008160010154905061124881600160109054906101000a9004600f0b600f0b6128fc90919063ffffffff16565b8161125391906143ea565b9250505092915050565b611265613621565b6000611272858585610d1e565b9050611281816080015161280e565b9150509392505050565b611294816129b6565b600061129f82612b22565b905060006112ac8361280e565b9050600060036000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083602001518152602001908152602001600020905060008360400151836060015161132091906143ea565b9050600061132d82612b68565b905060008360000160006101000a81548160ff0219169083151502179055506113568183612bbf565b60008360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506113983382876000015188602001518960600151612763565b8073ffffffffffffffffffffffffffffffffffffffff16877f332175f2dcab833624be15496835f787a7b519737d4a85f212022ac3bcd030ad87606001516040516113e39190613a55565b60405180910390a350505050505050565b600063bc197c8160e01b905095945050505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600082600101549050600061149a82612b68565b90508360000160009054906101000a900460ff166114ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e49061446a565b60405180910390fd5b60008460000160006101000a81548160ff0219169083151502179055506115148183612bbf565b6115213384888886612763565b505050505050565b600080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002090508060000160009054906101000a900460ff1691505092915050565b60006115c082600160009054906101000a9004600f0b600f0b6128fc90919063ffffffff16565b9050919050565b6115d18383611529565b15611611576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611608906144d6565b60405180910390fd5b600061161c84612c25565b9050806116325761162d8484612c44565b61163d565b61163c8484612cfb565b5b61167c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167390614568565b60405180910390fd5b600082116116bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b6906145fa565b60405180910390fd5b600033905081156116d9576116d48585612d88565b6116e4565b6116e38585612d98565b5b6000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020905060018160000160006101000a81548160ff021916908315150217905550838160010181905550818160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fbeab3a2bb824b124a8a1eb465eec003338d61b414db132d37e9b3a984fdcf01087876040516118009291906140cf565b60405180910390a3505050505050565b600063f23a6e6160e01b905095945050505050565b61182d611d37565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361189c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118939061468c565b60405180910390fd5b6118a581612165565b50565b6118b0611d37565b60648160ff1611156118f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ee9061417b565b60405180910390fd5b60006119058260ff1661199e565b905080600f0b600160009054906101000a9004600f0b600f0b0361195e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119559061420d565b60405180910390fd5b80600160006101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff1602179055505050565b6000606468010000000000000000836119b791906146ac565b6119c19190614718565b9050919050565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611a3b5750611a3a82612da8565b5b9050919050565b6000611a4d83612e12565b8015611a5f5750611a5e8383612e5f565b5b905092915050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020905081816004015411611b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af8906147ce565b60405180910390fd5b6000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060030160008481526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820154815250509050806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c949061483a565b60405180910390fd5b8060000151611ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd8906148cc565b60405180910390fd5b5050505050565b611d3382827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612f1e9092919063ffffffff16565b5050565b611d3f612fa4565b73ffffffffffffffffffffffffffffffffffffffff16611d5d611189565b73ffffffffffffffffffffffffffffffffffffffff1614611db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daa90614938565b60405180910390fd5b565b8260000160009054906101000a900460ff16611e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfd9061446a565b60405180910390fd5b8160000160009054906101000a900460ff16611e57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4e906147ce565b60405180910390fd5b81600101548111611e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e94906149ca565b60405180910390fd5b82600101548110611ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eda90614a5c565b60405180910390fd5b428260020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff161015611f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3f90614ac8565b60405180910390fd5b8260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd190614b5a565b60405180910390fd5b611fe382612fac565b612022576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201990614bec565b60405180910390fd5b505050565b600060046040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff16815260200188815260200187815260200186815260200162015180866120739190614c0c565b4261207e9190614c49565b67ffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505060048054905090508082600301819055509695505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600061223483612b68565b9050612241858583612fbc565b600033905060006040518060a001604052806001151581526020018373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001620151808661228d9190614c0c565b426122989190614c49565b67ffffffffffffffff168152602001600081525090506000600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002090506000816004015490508282600301600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001015560608201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506080820151816003015590505060018260040160008282546123e39190614c85565b92505081905550878973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f6a7a64ee90bd2fcf9f942e947c6a521c6e27711befb22fa80f887ccb8a6f3fd0846040516124489190613a55565b60405180910390a4505050505050505050565b8160000160009054906101000a900460ff166124ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a39061446a565b60405180910390fd5b8160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461253e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253590614b5a565b60405180910390fd5b81600101548103612584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257b90614d2b565b60405180910390fd5b5050565b60008360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008460000160009054906101000a900460ff1690506000856004015490506000856060015190508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263e90614dbd565b60405180910390fd5b82612687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267e90614e29565b60405180910390fd5b8482116126c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c090614e95565b60405180910390fd5b856000015161270d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270490614f01565b60405180910390fd5b428167ffffffffffffffff16101561275a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275190614ac8565b60405180910390fd5b50505050505050565b6000612770848484613056565b905061277d8583836130fd565b612788868585613149565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f1b81ea9818518fffa07ee623cfd9ce8af1900f3e0c918f2ca4fcfc9745cdc16586866040516127fe9291906140cf565b60405180910390a4505050505050565b612816613621565b600460018361282591906143ea565b8154811061283657612835614f21565b5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050919050565b600080820361290e57600090506129b0565b600083600f0b121561291f57600080fd5b600060406fffffffffffffffffffffffffffffffff841685600f0b02901c90506000608084901c85600f0b02905077ffffffffffffffffffffffffffffffffffffffffffffffff81111561297257600080fd5b604081901b9050817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038111156129a857600080fd5b818101925050505b92915050565b600081116129f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f09061439b565b60405180910390fd5b600480549050811115612a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a389061439b565b60405180910390fd5b6000612a4c82612b22565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614612ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ab790614fc2565b60405180910390fd5b6000612acb8361280e565b905042816080015167ffffffffffffffff1611612b1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1490615054565b60405180910390fd5b505050565b612b2a6135d0565b6000612b358361280e565b9050600081600001519050600082602001519050600083604001519050612b5d838383610d1e565b945050505050919050565b6000612bb73330847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661317a909392919063ffffffff16565b819050919050565b60008183612bcd91906143ea565b90506000811115612c20573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612c1e573d6000803e3d6000fd5b505b505050565b60008063d9b67a2660e01b9050612c3c8382612e5f565b915050919050565b6000808390503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401612c9a9190613a55565b602060405180830381865afa158015612cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdb9190615074565b73ffffffffffffffffffffffffffffffffffffffff161491505092915050565b60008083905060008173ffffffffffffffffffffffffffffffffffffffff1662fdd58e33866040518363ffffffff1660e01b8152600401612d3d929190613cb4565b602060405180830381865afa158015612d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7e91906150a1565b1191505092915050565b612d9482823330613203565b5050565b612da482823330613281565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000612e3e827f01ffc9a700000000000000000000000000000000000000000000000000000000612e5f565b8015612e585750612e568263ffffffff60e01b612e5f565b155b9050919050565b6000806301ffc9a760e01b83604051602401612e7b9190613a2b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000602060008551602087018a617530fa92503d91506000519050828015612f06575060208210155b8015612f125750600081115b94505050505092915050565b612f9f8363a9059cbb60e01b8484604051602401612f3d929190613cb4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506132fc565b505050565b600033905090565b6000808260030154149050919050565b612fc683836111c5565b811015613008576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fff9061518c565b60405180910390fd5b6130128383611529565b613051576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130489061446a565b60405180910390fd5b505050565b60006130618461078c565b61306e57600090506130f6565b60008061307c868686610c8e565b9150915061308a8282611ce8565b8173ffffffffffffffffffffffffffffffffffffffff16858773ffffffffffffffffffffffffffffffffffffffff167fff2e45a3ef00a9f7ac5964f5c99b4076de5ac15411f355f6163e1f9bb5f2c9a9846040516130e89190613a55565b60405180910390a480925050505b9392505050565b600061310883611599565b9050806002600082825461311c9190614c85565b925050819055506131438483838661313491906143ea565b61313e91906143ea565b611ce8565b50505050565b61315282612c25565b156131685761316382823086613203565b613175565b61317482823086613281565b5b505050565b6131fd846323b872dd60e01b85858560405160240161319b939291906151ac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506132fc565b50505050565b60008490508073ffffffffffffffffffffffffffffffffffffffff1663f242432a84848760016040518563ffffffff1660e01b8152600401613248949392919061521a565b600060405180830381600087803b15801561326257600080fd5b505af1158015613276573d6000803e3d6000fd5b505050505050505050565b60008490508073ffffffffffffffffffffffffffffffffffffffff166342842e0e8484876040518463ffffffff1660e01b81526004016132c3939291906151ac565b600060405180830381600087803b1580156132dd57600080fd5b505af11580156132f1573d6000803e3d6000fd5b505050505050505050565b600061335e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166133c39092919063ffffffff16565b90506000815111156133be578080602001905181019061337e919061529e565b6133bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133b49061533d565b60405180910390fd5b5b505050565b60606133d284846000856133db565b90509392505050565b606082471015613420576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613417906153cf565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516134499190615460565b60006040518083038185875af1925050503d8060008114613486576040519150601f19603f3d011682016040523d82523d6000602084013e61348b565b606091505b509150915061349c878383876134a8565b92505050949350505050565b6060831561350a576000835103613502576134c28561351d565b613501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134f8906154c3565b60405180910390fd5b5b829050613515565b6135148383613540565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156135535781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135879190615527565b60405180910390fd5b604051806080016040528060001515815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040518060a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600067ffffffffffffffff168152602001600081525090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600067ffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6136b981613684565b81146136c457600080fd5b50565b6000813590506136d6816136b0565b92915050565b6000602082840312156136f2576136f161367a565b5b6000613700848285016136c7565b91505092915050565b60008115159050919050565b61371e81613709565b82525050565b60006020820190506137396000830184613715565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061376a8261373f565b9050919050565b61377a8161375f565b811461378557600080fd5b50565b60008135905061379781613771565b92915050565b6000602082840312156137b3576137b261367a565b5b60006137c184828501613788565b91505092915050565b6000819050919050565b6137dd816137ca565b81146137e857600080fd5b50565b6000813590506137fa816137d4565b92915050565b6000806000606084860312156138195761381861367a565b5b600061382786828701613788565b9350506020613838868287016137eb565b9250506040613849868287016137eb565b9150509250925092565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6138a68261385d565b810181811067ffffffffffffffff821117156138c5576138c461386e565b5b80604052505050565b60006138d8613670565b90506138e4828261389d565b919050565b600067ffffffffffffffff8211156139045761390361386e565b5b61390d8261385d565b9050602081019050919050565b82818337600083830152505050565b600061393c613937846138e9565b6138ce565b90508281526020810184848401111561395857613957613858565b5b61396384828561391a565b509392505050565b600082601f8301126139805761397f613853565b5b8135613990848260208601613929565b91505092915050565b600080600080608085870312156139b3576139b261367a565b5b60006139c187828801613788565b94505060206139d287828801613788565b93505060406139e3878288016137eb565b925050606085013567ffffffffffffffff811115613a0457613a0361367f565b5b613a108782880161396b565b91505092959194509250565b613a2581613684565b82525050565b6000602082019050613a406000830184613a1c565b92915050565b613a4f816137ca565b82525050565b6000602082019050613a6a6000830184613a46565b92915050565b600060ff82169050919050565b613a8681613a70565b8114613a9157600080fd5b50565b600081359050613aa381613a7d565b92915050565b600060208284031215613abf57613abe61367a565b5b6000613acd84828501613a94565b91505092915050565b600081600f0b9050919050565b613aec81613ad6565b82525050565b6000602082019050613b076000830184613ae3565b92915050565b60008060408385031215613b2457613b2361367a565b5b6000613b3285828601613788565b9250506020613b43858286016137eb565b9150509250929050565b613b5681613709565b82525050565b613b65816137ca565b82525050565b613b748161375f565b82525050565b608082016000820151613b906000850182613b4d565b506020820151613ba36020850182613b5c565b506040820151613bb66040850182613b6b565b506060820151613bc96060850182613b5c565b50505050565b6000608082019050613be46000830184613b7a565b92915050565b600067ffffffffffffffff82169050919050565b613c0781613bea565b8114613c1257600080fd5b50565b600081359050613c2481613bfe565b92915050565b600080600080600060a08688031215613c4657613c4561367a565b5b6000613c5488828901613788565b9550506020613c65888289016137eb565b9450506040613c76888289016137eb565b9350506060613c87888289016137eb565b9250506080613c9888828901613c15565b9150509295509295909350565b613cae8161375f565b82525050565b6000604082019050613cc96000830185613ca5565b613cd66020830184613a46565b9392505050565b613ce681613bea565b82525050565b60a082016000820151613d026000850182613b4d565b506020820151613d156020850182613b6b565b506040820151613d286040850182613b5c565b506060820151613d3b6060850182613cdd565b506080820151613d4e6080850182613b5c565b50505050565b600060a082019050613d696000830184613cec565b92915050565b60008060008060808587031215613d8957613d8861367a565b5b6000613d9787828801613788565b9450506020613da8878288016137eb565b9350506040613db9878288016137eb565b9250506060613dca87828801613c15565b91505092959194509250565b600060208284031215613dec57613deb61367a565b5b6000613dfa848285016137eb565b91505092915050565b60a082016000820151613e196000850182613b6b565b506020820151613e2c6020850182613b5c565b506040820151613e3f6040850182613b5c565b506060820151613e526060850182613b5c565b506080820151613e656080850182613cdd565b50505050565b600060a082019050613e806000830184613e03565b92915050565b6000602082019050613e9b6000830184613ca5565b92915050565b600067ffffffffffffffff821115613ebc57613ebb61386e565b5b602082029050602081019050919050565b600080fd5b6000613ee5613ee084613ea1565b6138ce565b90508083825260208201905060208402830185811115613f0857613f07613ecd565b5b835b81811015613f315780613f1d88826137eb565b845260208401935050602081019050613f0a565b5050509392505050565b600082601f830112613f5057613f4f613853565b5b8135613f60848260208601613ed2565b91505092915050565b600080600080600060a08688031215613f8557613f8461367a565b5b6000613f9388828901613788565b9550506020613fa488828901613788565b945050604086013567ffffffffffffffff811115613fc557613fc461367f565b5b613fd188828901613f3b565b935050606086013567ffffffffffffffff811115613ff257613ff161367f565b5b613ffe88828901613f3b565b925050608086013567ffffffffffffffff81111561401f5761401e61367f565b5b61402b8882890161396b565b9150509295509295909350565b600080600080600060a086880312156140545761405361367a565b5b600061406288828901613788565b955050602061407388828901613788565b9450506040614084888289016137eb565b9350506060614095888289016137eb565b925050608086013567ffffffffffffffff8111156140b6576140b561367f565b5b6140c28882890161396b565b9150509295509295909350565b60006040820190506140e46000830185613a46565b6140f16020830184613a46565b9392505050565b600082825260208201905092915050565b7f4d61726b6574706c6163653a2050657263656e74616765206d7573742062652060008201527f6c657373206f7220657175616c207468616e2031303000000000000000000000602082015250565b60006141656036836140f8565b915061417082614109565b604082019050919050565b6000602082019050818103600083015261419481614158565b9050919050565b7f4d61726b6574706c6163653a204e65772070657263656e74616765206973207460008201527f68652073616d65206173207468652063757272656e74206f6e65000000000000602082015250565b60006141f7603a836140f8565b91506142028261419b565b604082019050919050565b60006020820190508181036000830152614226816141ea565b9050919050565b7f4d61726b6574706c6163653a204e6f7468696e6720746f20776974686472617760008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006142896021836140f8565b91506142948261422d565b604082019050919050565b600060208201905081810360008301526142b88161427c565b9050919050565b6000815190506142ce81613771565b92915050565b6000815190506142e3816137d4565b92915050565b60008060408385031215614300576142ff61367a565b5b600061430e858286016142bf565b925050602061431f858286016142d4565b9150509250929050565b7f4d61726b6574706c6163653a20436f756e7465726f66666572206e6f7420666f60008201527f756e640000000000000000000000000000000000000000000000000000000000602082015250565b60006143856023836140f8565b915061439082614329565b604082019050919050565b600060208201905081810360008301526143b481614378565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006143f5826137ca565b9150614400836137ca565b9250828203905081811115614418576144176143bb565b5b92915050565b7f4d61726b6574706c6163653a204e4654206e6f74206c69737465640000000000600082015250565b6000614454601b836140f8565b915061445f8261441e565b602082019050919050565b6000602082019050818103600083015261448381614447565b9050919050565b7f4d61726b6574706c6163653a204e465420616c7265616479206c697374656400600082015250565b60006144c0601f836140f8565b91506144cb8261448a565b602082019050919050565b600060208201905081810360008301526144ef816144b3565b9050919050565b7f4d61726b6574706c6163653a20596f7520646f6e2774206f776e20746865204e60008201527f4654000000000000000000000000000000000000000000000000000000000000602082015250565b60006145526022836140f8565b915061455d826144f6565b604082019050919050565b6000602082019050818103600083015261458181614545565b9050919050565b7f4d61726b6574706c6163653a205072696365206d75737420626520677265617460008201527f6572207468616e20300000000000000000000000000000000000000000000000602082015250565b60006145e46029836140f8565b91506145ef82614588565b604082019050919050565b60006020820190508181036000830152614613816145d7565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006146766026836140f8565b91506146818261461a565b604082019050919050565b600060208201905081810360008301526146a581614669565b9050919050565b60006146b782613ad6565b91506146c283613ad6565b92508282026146d081613ad6565b91508082146146e2576146e16143bb565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061472382613ad6565b915061472e83613ad6565b92508261473e5761473d6146e9565b5b600160000383147fffffffffffffffffffffffffffffffff8000000000000000000000000000000083141615614777576147766143bb565b5b828205905092915050565b7f4d61726b6574706c6163653a204f66666572206e6f7420666f756e6400000000600082015250565b60006147b8601c836140f8565b91506147c382614782565b602082019050919050565b600060208201905081810360008301526147e7816147ab565b9050919050565b7f4d61726b6574706c6163653a2057726f6e672042757965720000000000000000600082015250565b60006148246018836140f8565b915061482f826147ee565b602082019050919050565b6000602082019050818103600083015261485381614817565b9050919050565b7f4d61726b6574706c6163653a204f6666657220616c726561647920776173206360008201527f616e63656c6c6564000000000000000000000000000000000000000000000000602082015250565b60006148b66028836140f8565b91506148c18261485a565b604082019050919050565b600060208201905081810360008301526148e5816148a9565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006149226020836140f8565b915061492d826148ec565b602082019050919050565b6000602082019050818103600083015261495181614915565b9050919050565b7f4d61726b6574706c6163653a205072696365206d75737420626520677265617460008201527f6572207468616e206f6666657200000000000000000000000000000000000000602082015250565b60006149b4602d836140f8565b91506149bf82614958565b604082019050919050565b600060208201905081810360008301526149e3816149a7565b9050919050565b7f4d61726b6574706c6163653a205072696365206d757374206265206c6573732060008201527f7468616e204e4654207072696365000000000000000000000000000000000000602082015250565b6000614a46602e836140f8565b9150614a51826149ea565b604082019050919050565b60006020820190508181036000830152614a7581614a39565b9050919050565b7f4d61726b6574706c6163653a204f666665722065787069726564000000000000600082015250565b6000614ab2601a836140f8565b9150614abd82614a7c565b602082019050919050565b60006020820190508181036000830152614ae181614aa5565b9050919050565b7f4d61726b6574706c6163653a20596f75206172656e27742073656c6c696e672060008201527f746865204e465400000000000000000000000000000000000000000000000000602082015250565b6000614b446027836140f8565b9150614b4f82614ae8565b604082019050919050565b60006020820190508181036000830152614b7381614b37565b9050919050565b7f4d61726b6574706c6163653a20436f756e7465726f6666657220616c7265616460008201527f7920657869737473000000000000000000000000000000000000000000000000602082015250565b6000614bd66028836140f8565b9150614be182614b7a565b604082019050919050565b60006020820190508181036000830152614c0581614bc9565b9050919050565b6000614c1782613bea565b9150614c2283613bea565b9250828202614c3081613bea565b9150808214614c4257614c416143bb565b5b5092915050565b6000614c5482613bea565b9150614c5f83613bea565b9250828201905067ffffffffffffffff811115614c7f57614c7e6143bb565b5b92915050565b6000614c90826137ca565b9150614c9b836137ca565b9250828201905080821115614cb357614cb26143bb565b5b92915050565b7f4d61726b6574706c6163653a204e65772070726963652069732074686520736160008201527f6d652061732063757272656e7420707269636500000000000000000000000000602082015250565b6000614d156033836140f8565b9150614d2082614cb9565b604082019050919050565b60006020820190508181036000830152614d4481614d08565b9050919050565b7f4d61726b6574706c6163653a2053656e6465722073686f756c6420626520746860008201527f652073656c6c6572000000000000000000000000000000000000000000000000602082015250565b6000614da76028836140f8565b9150614db282614d4b565b604082019050919050565b60006020820190508181036000830152614dd681614d9a565b9050919050565b7f4d61726b6574706c6163653a204e4654206e6f7420666f756e64000000000000600082015250565b6000614e13601a836140f8565b9150614e1e82614ddd565b602082019050919050565b60006020820190508181036000830152614e4281614e06565b9050919050565b7f4d61726b6574706c6163653a204f6666657220646f65736e2774206578697374600082015250565b6000614e7f6020836140f8565b9150614e8a82614e49565b602082019050919050565b60006020820190508181036000830152614eae81614e72565b9050919050565b7f4d61726b6574706c6163653a204f666665722077617320757365640000000000600082015250565b6000614eeb601b836140f8565b9150614ef682614eb5565b602082019050919050565b60006020820190508181036000830152614f1a81614ede565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4d61726b6574706c6163653a20596f75206469646e2774206d616b652074686560008201527f206f666665720000000000000000000000000000000000000000000000000000602082015250565b6000614fac6026836140f8565b9150614fb782614f50565b604082019050919050565b60006020820190508181036000830152614fdb81614f9f565b9050919050565b7f4d61726b6574706c6163653a20436f756e7465726f666665722065787069726560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b600061503e6021836140f8565b915061504982614fe2565b604082019050919050565b6000602082019050818103600083015261506d81615031565b9050919050565b60006020828403121561508a5761508961367a565b5b6000615098848285016142bf565b91505092915050565b6000602082840312156150b7576150b661367a565b5b60006150c5848285016142d4565b91505092915050565b7f4d61726b6574706c6163653a205072696365206d75737420626520677265617460008201527f6572206f7220657175616c207468616e20746865206d696e696d756d206f666660208201527f657220707269636520666f722074686174204e4654202863616c6c206d696e5060408201527f726963654f666665722829290000000000000000000000000000000000000000606082015250565b6000615176606c836140f8565b9150615181826150ce565b608082019050919050565b600060208201905081810360008301526151a581615169565b9050919050565b60006060820190506151c16000830186613ca5565b6151ce6020830185613ca5565b6151db6040830184613a46565b949350505050565b600082825260208201905092915050565b50565b60006152046000836151e3565b915061520f826151f4565b600082019050919050565b600060a08201905061522f6000830187613ca5565b61523c6020830186613ca5565b6152496040830185613a46565b6152566060830184613a46565b8181036080830152615267816151f7565b905095945050505050565b61527b81613709565b811461528657600080fd5b50565b60008151905061529881615272565b92915050565b6000602082840312156152b4576152b361367a565b5b60006152c284828501615289565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615327602a836140f8565b9150615332826152cb565b604082019050919050565b600060208201905081810360008301526153568161531a565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006153b96026836140f8565b91506153c48261535d565b604082019050919050565b600060208201905081810360008301526153e8816153ac565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015615423578082015181840152602081019050615408565b60008484015250505050565b600061543a826153ef565b61544481856153fa565b9350615454818560208601615405565b80840191505092915050565b600061546c828461542f565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006154ad601d836140f8565b91506154b882615477565b602082019050919050565b600060208201905081810360008301526154dc816154a0565b9050919050565b600081519050919050565b60006154f9826154e3565b61550381856140f8565b9350615513818560208601615405565b61551c8161385d565b840191505092915050565b6000602082019050818103600083015261554181846154ee565b90509291505056fea26469706673582212204ab5fc5530d485cc10fffaeb28b3fc5c1dfe7fc566b4716c71385dd971152e3564736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1966,
        "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
        "label": "feeRatio",
        "offset": 0,
        "slot": "1",
        "type": "t_int128"
      },
      {
        "astId": 1975,
        "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
        "label": "floorRatio",
        "offset": 16,
        "slot": "1",
        "type": "t_int128"
      },
      {
        "astId": 1993,
        "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
        "label": "fusyBenefitsAccumulated",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2000,
        "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
        "label": "nftsListed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTForSale)1957_storage))"
      },
      {
        "astId": 2004,
        "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
        "label": "counteroffers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Counteroffer)1763_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Counteroffer)1763_storage)dyn_storage": {
        "base": "t_struct(Counteroffer)1763_storage",
        "encoding": "dynamic_array",
        "label": "struct IMarketplace.Counteroffer[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTForSale)1957_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Marketplace.NFTForSale))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(NFTForSale)1957_storage)"
      },
      "t_mapping(t_uint256,t_struct(NFTForSale)1957_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.NFTForSale)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTForSale)1957_storage"
      },
      "t_mapping(t_uint256,t_struct(Offer)1701_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMarketplace.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)1701_storage"
      },
      "t_struct(Counteroffer)1763_storage": {
        "encoding": "inplace",
        "label": "struct IMarketplace.Counteroffer",
        "members": [
          {
            "astId": 1754,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "collection",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1756,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "nftId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1758,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "offerId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1760,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1762,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "expirationDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(NFTForSale)1957_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.NFTForSale",
        "members": [
          {
            "astId": 1945,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "listed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1947,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1949,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1954,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "offers",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(Offer)1701_storage)"
          },
          {
            "astId": 1956,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "totalOffers",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Offer)1701_storage": {
        "encoding": "inplace",
        "label": "struct IMarketplace.Offer",
        "members": [
          {
            "astId": 1692,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "isInitialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1694,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "buyer",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1696,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1698,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "expirationDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 1700,
            "contract": "contracts/Erc20PaymentMarketplace.sol:Erc20PaymentMarketplace",
            "label": "counterofferId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}