{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/IMarketplace.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\n\ninterface IMarketplace {\n    function list(address collection, uint256 tokenId, uint256 price) external;\n\n    function isListed(\n        address collection,\n        uint256 tokenId\n    ) external view returns (bool);\n\n    function getNftInfo(\n        address collection,\n        uint256 tokenId\n    ) external view returns (NftInfo calldata);\n\n    struct NftInfo {\n        bool listed;\n        uint256 price;\n        address seller;\n        uint256 totalOffers;\n    }\n\n    function changePriceOf(\n        address collection,\n        uint256 tokenId,\n        uint256 newPrice\n    ) external;\n\n    function buy(address collection, uint256 tokenId) external payable;\n\n    function makeOffer(\n        address collection,\n        uint256 tokenId,\n        uint64 durationInDays\n    ) external payable;\n\n    function getOffer(\n        address collection,\n        uint256 nftId,\n        uint256 offerId\n    ) external view returns (Offer calldata);\n\n    struct Offer {\n        bool isInitialized;\n        address buyer;\n        uint256 price;\n        uint64 expirationDate;\n        uint256 counterofferId;\n    }\n\n    function cancelOffer(\n        address collection,\n        uint256 tokenId,\n        uint256 indexOfOfferMapping\n    ) external;\n\n    function takeOffer(\n        address collection,\n        uint256 tokenId,\n        uint256 indexOfOfferMapping\n    ) external;\n\n    function makeCounteroffer(\n        address collection,\n        uint256 tokenId,\n        uint256 offerId,\n        uint256 newPriceOffer,\n        uint64 durationInDays\n    ) external;\n\n    function getCounteroffer(\n        address collection,\n        uint256 nftId,\n        uint256 offerId\n    ) external view returns (Counteroffer calldata);\n\n    struct Counteroffer {\n        address collection;\n        uint256 nftId;\n        uint256 offerId;\n        uint256 price;\n        uint64 expirationDate;\n    }\n\n    function takeCounteroffer(uint256 id) external payable;\n\n    function getFusyonaFeeFor(uint256 price) external view returns (uint256);\n\n    function setFeeRatioFromPercentage(uint8 percentage) external;\n\n    function feeRatio() external view returns (int128);\n\n    function withdraw() external;\n\n    function setFloorRatioFromPercentage(uint8 percentage) external;\n\n    function floorRatio() external view returns (int128);\n\n    function fusyBenefitsAccumulated() external view returns (uint256);\n\n    event NFTListed(\n        address indexed seller,\n        address indexed collection,\n        uint256 nftId,\n        uint256 price\n    );\n    event NFTSold(\n        address indexed buyer,\n        address indexed seller,\n        address indexed collection,\n        uint256 nftId,\n        uint256 price\n    );\n    event OfferMade(\n        address indexed buyer,\n        address indexed collection,\n        uint256 indexed nftId,\n        uint256 offerId\n    );\n    event CounterofferMade(\n        address indexed collection,\n        uint256 indexed nftId,\n        uint256 indexed offerId,\n        uint256 counterofferId\n    );\n    event CounterofferTaken(\n        uint256 indexed id,\n        uint256 price,\n        address indexed seller\n    );\n    event RootWithdrawal(address indexed beneficiary, uint256 amount);\n    event NFTPriceChanged(\n        address indexed collection,\n        uint256 indexed nftId,\n        uint256 newPrice\n    );\n    event CancelledOffer(\n        address indexed collection,\n        uint256 indexed tokenId,\n        uint256 indexOfOfferMapping,\n        uint256 priceOffer,\n        address indexed buyer\n    );\n}\n"
    },
    "contracts/libraries/ABDKMath64x64.sol": {
      "content": "// SPDX-License-Identifier: BSD-4-Clause\n/*\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n */\npragma solidity ^0.8.0;\n\n/**\n * Smart contract library of mathematical functions operating with signed\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\n * basically a simple fraction whose numerator is signed 128-bit integer and\n * denominator is 2^64.  As long as denominator is always the same, there is no\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\n * represented by int128 type holding only the numerator.\n */\nlibrary ABDKMath64x64 {\n    /*\n     * Minimum value signed 64.64-bit fixed point number may have.\n     */\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\n\n    /*\n     * Maximum value signed 64.64-bit fixed point number may have.\n     */\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    /**\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\n     * number.  Revert on overflow.\n     *\n     * @param x signed 256-bit integer number\n     * @return signed 64.64-bit fixed point number\n     */\n    function fromInt(int256 x) internal pure returns (int128) {\n        unchecked {\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\n            return int128(x << 64);\n        }\n    }\n\n    /**\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\n     * rounding down.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64-bit integer number\n     */\n    function toInt(int128 x) internal pure returns (int64) {\n        unchecked {\n            return int64(x >> 64);\n        }\n    }\n\n    /**\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\n     * number.  Revert on overflow.\n     *\n     * @param x unsigned 256-bit integer number\n     * @return signed 64.64-bit fixed point number\n     */\n    function fromUInt(uint256 x) internal pure returns (int128) {\n        unchecked {\n            require(x <= 0x7FFFFFFFFFFFFFFF);\n            return int128(int256(x << 64));\n        }\n    }\n\n    /**\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\n     * number rounding down.  Revert on underflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return unsigned 64-bit integer number\n     */\n    function toUInt(int128 x) internal pure returns (uint64) {\n        unchecked {\n            require(x >= 0);\n            return uint64(uint128(x >> 64));\n        }\n    }\n\n    /**\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\n     * number rounding down.  Revert on overflow.\n     *\n     * @param x signed 128.128-bin fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function from128x128(int256 x) internal pure returns (int128) {\n        unchecked {\n            int256 result = x >> 64;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\n     * number.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 128.128 fixed point number\n     */\n    function to128x128(int128 x) internal pure returns (int256) {\n        unchecked {\n            return int256(x) << 64;\n        }\n    }\n\n    /**\n     * Calculate x + y.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function add(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            int256 result = int256(x) + y;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate x - y.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function sub(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            int256 result = int256(x) - y;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate x * y rounding down.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function mul(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            int256 result = (int256(x) * y) >> 64;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\n     * number and y is signed 256-bit integer number.  Revert on overflow.\n     *\n     * @param x signed 64.64 fixed point number\n     * @param y signed 256-bit integer number\n     * @return signed 256-bit integer number\n     */\n    function muli(int128 x, int256 y) internal pure returns (int256) {\n        unchecked {\n            if (x == MIN_64x64) {\n                require(\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\n                        y <= 0x1000000000000000000000000000000000000000000000000\n                );\n                return -y << 63;\n            } else {\n                bool negativeResult = false;\n                if (x < 0) {\n                    x = -x;\n                    negativeResult = true;\n                }\n                if (y < 0) {\n                    y = -y; // We rely on overflow behavior here\n                    negativeResult = !negativeResult;\n                }\n                uint256 absoluteResult = mulu(x, uint256(y));\n                if (negativeResult) {\n                    require(\n                        absoluteResult <=\n                            0x8000000000000000000000000000000000000000000000000000000000000000\n                    );\n                    return -int256(absoluteResult); // We rely on overflow behavior here\n                } else {\n                    require(\n                        absoluteResult <=\n                            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                    );\n                    return int256(absoluteResult);\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\n     *\n     * @param x signed 64.64 fixed point number\n     * @param y unsigned 256-bit integer number\n     * @return unsigned 256-bit integer number\n     */\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\n        unchecked {\n            if (y == 0) return 0;\n\n            require(x >= 0);\n\n            uint256 lo = (uint256(int256(x)) *\n                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\n            uint256 hi = uint256(int256(x)) * (y >> 128);\n\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n            hi <<= 64;\n\n            require(\n                hi <=\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\n                        lo\n            );\n            return hi + lo;\n        }\n    }\n\n    /**\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\n     * zero.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function div(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            require(y != 0);\n            int256 result = (int256(x) << 64) / y;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\n     * integer numbers.  Revert on overflow or when y is zero.\n     *\n     * @param x signed 256-bit integer number\n     * @param y signed 256-bit integer number\n     * @return signed 64.64-bit fixed point number\n     */\n    function divi(int256 x, int256 y) internal pure returns (int128) {\n        unchecked {\n            require(y != 0);\n\n            bool negativeResult = false;\n            if (x < 0) {\n                x = -x; // We rely on overflow behavior here\n                negativeResult = true;\n            }\n            if (y < 0) {\n                y = -y; // We rely on overflow behavior here\n                negativeResult = !negativeResult;\n            }\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\n            if (negativeResult) {\n                require(absoluteResult <= 0x80000000000000000000000000000000);\n                return -int128(absoluteResult); // We rely on overflow behavior here\n            } else {\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n                return int128(absoluteResult); // We rely on overflow behavior here\n            }\n        }\n    }\n\n    /**\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n     * integer numbers.  Revert on overflow or when y is zero.\n     *\n     * @param x unsigned 256-bit integer number\n     * @param y unsigned 256-bit integer number\n     * @return signed 64.64-bit fixed point number\n     */\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\n        unchecked {\n            require(y != 0);\n            uint128 result = divuu(x, y);\n            require(result <= uint128(MAX_64x64));\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate -x.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function neg(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x != MIN_64x64);\n            return -x;\n        }\n    }\n\n    /**\n     * Calculate |x|.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function abs(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x != MIN_64x64);\n            return x < 0 ? -x : x;\n        }\n    }\n\n    /**\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\n     * zero.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function inv(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x != 0);\n            int256 result = int256(0x100000000000000000000000000000000) / x;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function avg(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            return int128((int256(x) + int256(y)) >> 1);\n        }\n    }\n\n    /**\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\n     * Revert on overflow or in case x * y is negative.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            int256 m = int256(x) * int256(y);\n            require(m >= 0);\n            require(\n                m <\n                    0x4000000000000000000000000000000000000000000000000000000000000000\n            );\n            return int128(sqrtu(uint256(m)));\n        }\n    }\n\n    /**\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y uint256 value\n     * @return signed 64.64-bit fixed point number\n     */\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\n        unchecked {\n            bool negative = x < 0 && y & 1 == 1;\n\n            uint256 absX = uint128(x < 0 ? -x : x);\n            uint256 absResult;\n            absResult = 0x100000000000000000000000000000000;\n\n            if (absX <= 0x10000000000000000) {\n                absX <<= 63;\n                while (y != 0) {\n                    if (y & 0x1 != 0) {\n                        absResult = (absResult * absX) >> 127;\n                    }\n                    absX = (absX * absX) >> 127;\n\n                    if (y & 0x2 != 0) {\n                        absResult = (absResult * absX) >> 127;\n                    }\n                    absX = (absX * absX) >> 127;\n\n                    if (y & 0x4 != 0) {\n                        absResult = (absResult * absX) >> 127;\n                    }\n                    absX = (absX * absX) >> 127;\n\n                    if (y & 0x8 != 0) {\n                        absResult = (absResult * absX) >> 127;\n                    }\n                    absX = (absX * absX) >> 127;\n\n                    y >>= 4;\n                }\n\n                absResult >>= 64;\n            } else {\n                uint256 absXShift = 63;\n                if (absX < 0x1000000000000000000000000) {\n                    absX <<= 32;\n                    absXShift -= 32;\n                }\n                if (absX < 0x10000000000000000000000000000) {\n                    absX <<= 16;\n                    absXShift -= 16;\n                }\n                if (absX < 0x1000000000000000000000000000000) {\n                    absX <<= 8;\n                    absXShift -= 8;\n                }\n                if (absX < 0x10000000000000000000000000000000) {\n                    absX <<= 4;\n                    absXShift -= 4;\n                }\n                if (absX < 0x40000000000000000000000000000000) {\n                    absX <<= 2;\n                    absXShift -= 2;\n                }\n                if (absX < 0x80000000000000000000000000000000) {\n                    absX <<= 1;\n                    absXShift -= 1;\n                }\n\n                uint256 resultShift = 0;\n                while (y != 0) {\n                    require(absXShift < 64);\n\n                    if (y & 0x1 != 0) {\n                        absResult = (absResult * absX) >> 127;\n                        resultShift += absXShift;\n                        if (absResult > 0x100000000000000000000000000000000) {\n                            absResult >>= 1;\n                            resultShift += 1;\n                        }\n                    }\n                    absX = (absX * absX) >> 127;\n                    absXShift <<= 1;\n                    if (absX >= 0x100000000000000000000000000000000) {\n                        absX >>= 1;\n                        absXShift += 1;\n                    }\n\n                    y >>= 1;\n                }\n\n                require(resultShift < 64);\n                absResult >>= 64 - resultShift;\n            }\n            int256 result = negative ? -int256(absResult) : int256(absResult);\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function sqrt(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x >= 0);\n            return int128(sqrtu(uint256(int256(x)) << 64));\n        }\n    }\n\n    /**\n     * Calculate binary logarithm of x.  Revert if x <= 0.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function log_2(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x > 0);\n\n            int256 msb = 0;\n            int256 xc = x;\n            if (xc >= 0x10000000000000000) {\n                xc >>= 64;\n                msb += 64;\n            }\n            if (xc >= 0x100000000) {\n                xc >>= 32;\n                msb += 32;\n            }\n            if (xc >= 0x10000) {\n                xc >>= 16;\n                msb += 16;\n            }\n            if (xc >= 0x100) {\n                xc >>= 8;\n                msb += 8;\n            }\n            if (xc >= 0x10) {\n                xc >>= 4;\n                msb += 4;\n            }\n            if (xc >= 0x4) {\n                xc >>= 2;\n                msb += 2;\n            }\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\n\n            int256 result = (msb - 64) << 64;\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\n                ux *= ux;\n                uint256 b = ux >> 255;\n                ux >>= 127 + b;\n                result += bit * int256(b);\n            }\n\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate natural logarithm of x.  Revert if x <= 0.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function ln(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x > 0);\n\n            return\n                int128(\n                    int256(\n                        (uint256(int256(log_2(x))) *\n                            0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\n                    )\n                );\n        }\n    }\n\n    /**\n     * Calculate binary exponent of x.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function exp_2(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x < 0x400000000000000000); // Overflow\n\n            if (x < -0x400000000000000000) return 0; // Underflow\n\n            uint256 result = 0x80000000000000000000000000000000;\n\n            if (x & 0x8000000000000000 > 0)\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\n            if (x & 0x4000000000000000 > 0)\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\n            if (x & 0x2000000000000000 > 0)\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\n            if (x & 0x1000000000000000 > 0)\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\n            if (x & 0x800000000000000 > 0)\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\n            if (x & 0x400000000000000 > 0)\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\n            if (x & 0x200000000000000 > 0)\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\n            if (x & 0x100000000000000 > 0)\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\n            if (x & 0x80000000000000 > 0)\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\n            if (x & 0x40000000000000 > 0)\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\n            if (x & 0x20000000000000 > 0)\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\n            if (x & 0x10000000000000 > 0)\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\n            if (x & 0x8000000000000 > 0)\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\n            if (x & 0x4000000000000 > 0)\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\n            if (x & 0x2000000000000 > 0)\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\n            if (x & 0x1000000000000 > 0)\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\n            if (x & 0x800000000000 > 0)\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\n            if (x & 0x400000000000 > 0)\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\n            if (x & 0x200000000000 > 0)\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\n            if (x & 0x100000000000 > 0)\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\n            if (x & 0x80000000000 > 0)\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\n            if (x & 0x40000000000 > 0)\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\n            if (x & 0x20000000000 > 0)\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\n            if (x & 0x10000000000 > 0)\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\n            if (x & 0x8000000000 > 0)\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\n            if (x & 0x4000000000 > 0)\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\n            if (x & 0x2000000000 > 0)\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\n            if (x & 0x1000000000 > 0)\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\n            if (x & 0x800000000 > 0)\n                result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\n            if (x & 0x400000000 > 0)\n                result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\n            if (x & 0x200000000 > 0)\n                result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\n            if (x & 0x100000000 > 0)\n                result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\n            if (x & 0x80000000 > 0)\n                result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\n            if (x & 0x40000000 > 0)\n                result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\n            if (x & 0x20000000 > 0)\n                result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\n            if (x & 0x10000000 > 0)\n                result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\n            if (x & 0x8000000 > 0)\n                result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\n            if (x & 0x4000000 > 0)\n                result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\n            if (x & 0x2000000 > 0)\n                result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\n            if (x & 0x1000000 > 0)\n                result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\n            if (x & 0x800000 > 0)\n                result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\n            if (x & 0x400000 > 0)\n                result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\n            if (x & 0x200000 > 0)\n                result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\n            if (x & 0x100000 > 0)\n                result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\n            if (x & 0x80000 > 0)\n                result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\n            if (x & 0x40000 > 0)\n                result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\n            if (x & 0x20000 > 0)\n                result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\n            if (x & 0x10000 > 0)\n                result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\n            if (x & 0x8000 > 0)\n                result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\n            if (x & 0x4000 > 0)\n                result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\n            if (x & 0x2000 > 0)\n                result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\n            if (x & 0x1000 > 0)\n                result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\n            if (x & 0x800 > 0)\n                result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\n            if (x & 0x400 > 0)\n                result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\n            if (x & 0x200 > 0)\n                result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\n            if (x & 0x100 > 0)\n                result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\n            if (x & 0x80 > 0)\n                result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\n            if (x & 0x40 > 0)\n                result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\n            if (x & 0x20 > 0)\n                result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\n            if (x & 0x10 > 0)\n                result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\n            if (x & 0x8 > 0)\n                result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\n            if (x & 0x4 > 0)\n                result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\n            if (x & 0x2 > 0)\n                result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\n            if (x & 0x1 > 0)\n                result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\n\n            result >>= uint256(int256(63 - (x >> 64)));\n            require(result <= uint256(int256(MAX_64x64)));\n\n            return int128(int256(result));\n        }\n    }\n\n    /**\n     * Calculate natural exponent of x.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function exp(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x < 0x400000000000000000); // Overflow\n\n            if (x < -0x400000000000000000) return 0; // Underflow\n\n            return\n                exp_2(\n                    int128(\n                        (int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\n                    )\n                );\n        }\n    }\n\n    /**\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n     * integer numbers.  Revert on overflow or when y is zero.\n     *\n     * @param x unsigned 256-bit integer number\n     * @param y unsigned 256-bit integer number\n     * @return unsigned 64.64-bit fixed point number\n     */\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\n        unchecked {\n            require(y != 0);\n\n            uint256 result;\n\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n                result = (x << 64) / y;\n            else {\n                uint256 msb = 192;\n                uint256 xc = x >> 192;\n                if (xc >= 0x100000000) {\n                    xc >>= 32;\n                    msb += 32;\n                }\n                if (xc >= 0x10000) {\n                    xc >>= 16;\n                    msb += 16;\n                }\n                if (xc >= 0x100) {\n                    xc >>= 8;\n                    msb += 8;\n                }\n                if (xc >= 0x10) {\n                    xc >>= 4;\n                    msb += 4;\n                }\n                if (xc >= 0x4) {\n                    xc >>= 2;\n                    msb += 2;\n                }\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\n\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n\n                uint256 hi = result * (y >> 128);\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n\n                uint256 xh = x >> 192;\n                uint256 xl = x << 64;\n\n                if (xl < lo) xh -= 1;\n                xl -= lo; // We rely on overflow behavior here\n                lo = hi << 128;\n                if (xl < lo) xh -= 1;\n                xl -= lo; // We rely on overflow behavior here\n\n                assert(xh == hi >> 128);\n\n                result += xl / y;\n            }\n\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n            return uint128(result);\n        }\n    }\n\n    /**\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\n     * number.\n     *\n     * @param x unsigned 256-bit integer number\n     * @return unsigned 128-bit integer number\n     */\n    function sqrtu(uint256 x) private pure returns (uint128) {\n        unchecked {\n            if (x == 0) return 0;\n            else {\n                uint256 xx = x;\n                uint256 r = 1;\n                if (xx >= 0x100000000000000000000000000000000) {\n                    xx >>= 128;\n                    r <<= 64;\n                }\n                if (xx >= 0x10000000000000000) {\n                    xx >>= 64;\n                    r <<= 32;\n                }\n                if (xx >= 0x100000000) {\n                    xx >>= 32;\n                    r <<= 16;\n                }\n                if (xx >= 0x10000) {\n                    xx >>= 16;\n                    r <<= 8;\n                }\n                if (xx >= 0x100) {\n                    xx >>= 8;\n                    r <<= 4;\n                }\n                if (xx >= 0x10) {\n                    xx >>= 4;\n                    r <<= 2;\n                }\n                if (xx >= 0x4) {\n                    r <<= 1;\n                }\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1; // Seven iterations should be enough\n                uint256 r1 = x / r;\n                return uint128(r < r1 ? r : r1);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/MathFees.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nlibrary MathFees {\n    function _verifyFeeRatioBounds(\n        int128 _percentageMultipliedBy2Up64AndTwoDecimals\n    ) internal pure returns (bool) {\n        require(\n            _percentageMultipliedBy2Up64AndTwoDecimals > 0 &&\n                _percentageMultipliedBy2Up64AndTwoDecimals <=\n                _getMaxValueStoredInUint128(),\n            \"Math: Value of feeRatio is out of bound.\"\n        );\n        require(\n            _getRemainderOfUint128(\n                _percentageMultipliedBy2Up64AndTwoDecimals\n            ) == 0,\n            \"Math: You need to encode the argument as: percentage*100*2^64.\"\n        );\n        return true;\n    }\n\n    function _getMaxValueStoredInUint128() internal pure returns (int128) {\n        return int128(0x7fffffffffffffffffffffffffffffff);\n    }\n\n    function _getRemainderOfUint128(\n        int128 _percentageMultipliedBy2Up64AndTwoDecimals\n    ) internal pure returns (int128) {\n        require(\n            _percentageMultipliedBy2Up64AndTwoDecimals > 0,\n            \"Math: Value should be greater than 0.\"\n        );\n        int128 denominator = 2 ** 64;\n        return _percentageMultipliedBy2Up64AndTwoDecimals % denominator;\n    }\n\n    function _computeFeeRatio(\n        int128 _percentageMultipliedBy2Up64AndTwoDecimals\n    ) internal pure returns (int128) {\n        return ((_percentageMultipliedBy2Up64AndTwoDecimals /\n            _twoDecimalsPerPercentageInput()) / int128(100));\n    }\n\n    function _npercent(int128 percent) internal pure returns (int128) {\n        return (percent * int128(2 ** 64)) / int128(100);\n    }\n\n    function _twoDecimalsPerPercentageInput() private pure returns (int128) {\n        return int128(100);\n    }\n}\n"
    },
    "contracts/Marketplace.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ERC1155Holder} from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {IMarketplace} from \"./IMarketplace.sol\";\nimport {ABDKMath64x64} from \"./libraries/ABDKMath64x64.sol\";\nimport {MathFees} from \"./libraries/MathFees.sol\";\n\ncontract Marketplace is IMarketplace, ERC1155Holder, Ownable {\n    using ABDKMath64x64 for int128;\n    using MathFees for int128;\n\n    struct NFTForSale {\n        bool listed;\n        uint256 price;\n        address seller;\n        mapping(uint256 => Offer) offers;\n        uint256 totalOffers;\n    }\n\n    int128 public feeRatio = MathFees._npercent(int128(2));\n    int128 public floorRatio = MathFees._npercent(int128(20));\n\n    uint256 internal constant ONE_COPY = 1;\n    uint64 internal constant ONE_DAY_IN_SECONDS = uint64(24 * 60 * 60);\n    uint256 internal constant NO_COUNTER_OFFER = 0;\n\n    uint256 public fusyBenefitsAccumulated;\n\n    mapping(address => mapping(uint256 => NFTForSale)) internal nftsListed;\n\n    Counteroffer[] counteroffers;\n\n    constructor() {}\n\n    receive() external payable {}\n\n    function cancelOffer(\n        address collection,\n        uint256 tokenId,\n        uint256 indexOfOfferMapping\n    ) external override {\n        _cancelOfferRequirements(collection, tokenId, indexOfOfferMapping);\n        Offer storage offer = nftsListed[collection][tokenId].offers[\n            indexOfOfferMapping\n        ];\n        offer.isInitialized = false;\n        uint256 moneyToRebase = offer.price;\n        address buyer = offer.buyer;\n        payable(buyer).transfer(moneyToRebase);\n        emit CancelledOffer(\n            collection,\n            tokenId,\n            indexOfOfferMapping,\n            moneyToRebase,\n            buyer\n        );\n    }\n\n    function _cancelOfferRequirements(\n        address collection,\n        uint256 tokenId,\n        uint256 indexOfOfferMapping\n    ) private view {\n        NFTForSale storage nft = nftsListed[collection][tokenId];\n        require(\n            nft.totalOffers > indexOfOfferMapping,\n            \"Marketplace: Offer not found\"\n        );\n        Offer memory offer = nftsListed[collection][tokenId].offers[\n            indexOfOfferMapping\n        ];\n        require(msg.sender == offer.buyer, \"Marketplace: Wrong Buyer\");\n        require(\n            offer.isInitialized,\n            \"Marketplace: Offer already was cancelled\"\n        );\n    }\n\n    function withdraw() external override onlyOwner {\n        require(\n            fusyBenefitsAccumulated > 0,\n            \"Marketplace: Nothing to withdraw.\"\n        );\n        uint256 amountToWithdraw = fusyBenefitsAccumulated;\n        fusyBenefitsAccumulated = 0;\n        payable(owner()).transfer(amountToWithdraw);\n        emit RootWithdrawal(owner(), amountToWithdraw);\n    }\n\n    function setFeeRatioFromPercentage(\n        uint8 percentage\n    ) external override onlyOwner {\n        require(\n            percentage <= 100,\n            \"Marketplace: Percentage must be less or equal than 100\"\n        );\n        int128 newFeeRatio = MathFees._npercent(int128(uint128(percentage)));\n        require(\n            feeRatio != newFeeRatio,\n            \"Marketplace: New percentage is the same as the current one\"\n        );\n        feeRatio = newFeeRatio;\n    }\n\n    function takeOffer(\n        address collection,\n        uint256 tokenId,\n        uint256 indexOfOfferMapping\n    ) external override {\n        NFTForSale storage nft = nftsListed[collection][tokenId];\n        Offer storage offer = nft.offers[indexOfOfferMapping];\n        _takeOfferRequirements(nft, offer, indexOfOfferMapping);\n        address seller = nft.seller;\n        address buyer = offer.buyer;\n        uint256 price = offer.price;\n        nft.listed = false;\n        offer.isInitialized = false;\n        _trade(buyer, seller, collection, tokenId, price);\n    }\n\n    function _takeOfferRequirements(\n        NFTForSale storage nft,\n        Offer memory offer,\n        uint256 indexOfOfferMapping\n    ) private view {\n        address seller = nft.seller;\n        bool listed = nft.listed;\n        uint256 totalOffers = nft.totalOffers;\n        uint64 expirationDate = offer.expirationDate;\n        require(\n            msg.sender == seller,\n            \"Marketplace: Sender should be the seller\"\n        );\n        require(listed, \"Marketplace: NFT not found\");\n        require(\n            totalOffers > indexOfOfferMapping,\n            \"Marketplace: Offer doesn't exist\"\n        );\n        require(offer.isInitialized, \"Marketplace: Offer was used\");\n        require(\n            expirationDate >= block.timestamp,\n            \"Marketplace: Offer expired\"\n        );\n    }\n\n    function _trade(\n        address buyer,\n        address seller,\n        address collection,\n        uint256 nftId,\n        uint256 priceOfTrade\n    ) private {\n        _payingBenefits(seller, priceOfTrade);\n        IERC1155 ierc1155 = IERC1155(collection);\n        ierc1155.safeTransferFrom(address(this), buyer, nftId, ONE_COPY, \"\");\n        emit NFTSold(buyer, seller, collection, nftId, priceOfTrade);\n    }\n\n    function makeOffer(\n        address collection,\n        uint256 nftId,\n        uint64 durationInDays\n    ) external payable override {\n        uint256 priceOffer = msg.value;\n        _makeOfferRequirements(collection, nftId, priceOffer);\n\n        address buyer = msg.sender;\n        Offer memory offer = Offer({\n            isInitialized: true,\n            buyer: buyer,\n            price: priceOffer,\n            expirationDate: uint64(block.timestamp) +\n                durationInDays *\n                ONE_DAY_IN_SECONDS,\n            counterofferId: NO_COUNTER_OFFER\n        });\n        NFTForSale storage nft = nftsListed[collection][nftId];\n        uint256 offerId = nft.totalOffers;\n        nft.offers[offerId] = offer;\n        nft.totalOffers += 1;\n        emit OfferMade(buyer, collection, nftId, offerId);\n    }\n\n    function _makeOfferRequirements(\n        address collection,\n        uint256 nftId,\n        uint256 priceOffer\n    ) private view {\n        require(\n            priceOffer >= minPriceOffer(collection, nftId),\n            \"Marketplace: Price must be greater or equal than the minimum offer price for that NFT (call minPriceOffer())\"\n        );\n        require(isListed(collection, nftId), \"Marketplace: NFT not listed\");\n    }\n\n    function minPriceOffer(\n        address collection,\n        uint256 nftId\n    ) public view returns (uint256) {\n        NFTForSale storage nft = nftsListed[collection][nftId];\n        uint256 currentPrice = nft.price;\n        return (currentPrice - floorRatio.mulu(currentPrice));\n    }\n\n    function buy(address collection, uint256 nftId) external payable override {\n        NFTForSale storage nft = nftsListed[collection][nftId];\n        address seller = nft.seller;\n        uint256 moneyReceived = msg.value;\n        uint256 moneyRequired = nft.price;\n\n        _purchaseRequirements(nft, moneyReceived, moneyRequired);\n\n        nft.listed = false;\n        _transferRemainingToSender(moneyReceived, moneyRequired);\n        _trade(msg.sender, seller, collection, nftId, moneyRequired);\n    }\n\n    function _purchaseRequirements(\n        NFTForSale storage nft,\n        uint256 moneyReceived,\n        uint256 moneyRequired\n    ) private view {\n        require(nft.listed, \"Marketplace: NFT not listed\");\n        require(\n            moneyReceived >= moneyRequired,\n            \"Marketplace: Sent amount not enough\"\n        );\n    }\n\n    function _transferRemainingToSender(\n        uint256 moneyReceived,\n        uint256 moneyRequired\n    ) private {\n        uint256 remaining = moneyReceived - moneyRequired;\n        if (remaining > 0) {\n            payable(msg.sender).transfer(remaining);\n        }\n    }\n\n    function _payingBenefits(address seller, uint256 moneyRequired) private {\n        uint256 fusyonaFee = getFusyonaFeeFor(moneyRequired);\n        fusyBenefitsAccumulated += fusyonaFee;\n        payable(seller).transfer(moneyRequired - fusyonaFee);\n    }\n\n    function getFusyonaFeeFor(\n        uint256 netPayment\n    ) public view returns (uint256) {\n        return feeRatio.mulu(netPayment);\n    }\n\n    function list(\n        address collection,\n        uint256 nftId,\n        uint256 price\n    ) external override {\n        _listRequirements(collection, nftId, price);\n\n        address seller = msg.sender;\n        IERC1155 ierc1155 = IERC1155(collection);\n        ierc1155.safeTransferFrom(seller, address(this), nftId, ONE_COPY, \"\");\n        NFTForSale storage newNFTforListing = nftsListed[collection][nftId];\n        newNFTforListing.listed = true;\n        newNFTforListing.price = price;\n        newNFTforListing.seller = seller;\n        emit NFTListed(seller, collection, nftId, price);\n    }\n\n    function _listRequirements(\n        address collection,\n        uint256 nftId,\n        uint256 price\n    ) private view {\n        require(\n            !isListed(collection, nftId),\n            \"Marketplace: NFT already listed\"\n        );\n        require(\n            _senderIsTheOwnerOfNft(collection, nftId),\n            \"Marketplace: You don't own the NFT\"\n        );\n        require(price > 0, \"Marketplace: Price must be greater than 0\");\n    }\n\n    function isListed(\n        address collection,\n        uint256 nftId\n    ) public view returns (bool) {\n        NFTForSale storage nftTarget = nftsListed[collection][nftId];\n        return nftTarget.listed;\n    }\n\n    function _senderIsTheOwnerOfNft(\n        address collection,\n        uint256 nftId\n    ) private view returns (bool) {\n        IERC1155 ierc1155 = IERC1155(collection);\n        return ierc1155.balanceOf(msg.sender, nftId) > 0;\n    }\n\n    function makeCounteroffer(\n        address collection,\n        uint256 nftId,\n        uint256 offerId,\n        uint256 newPrice,\n        uint64 durationInDays\n    ) external override {\n        NFTForSale storage nft = nftsListed[collection][nftId];\n        Offer storage offer = nft.offers[offerId];\n        _makeCounterofferRequirements(nft, offer, newPrice);\n\n        uint256 counterofferId = _saveCounteroffer(\n            collection,\n            nftId,\n            offerId,\n            newPrice,\n            durationInDays,\n            offer\n        );\n        emit CounterofferMade(collection, nftId, offerId, counterofferId);\n    }\n\n    function _makeCounterofferRequirements(\n        NFTForSale storage nft,\n        Offer storage offer,\n        uint256 newPriceOffer\n    ) private view {\n        require(nft.listed, \"Marketplace: NFT not listed\");\n        require(offer.isInitialized, \"Marketplace: Offer not found\");\n        require(\n            newPriceOffer > offer.price,\n            \"Marketplace: Price must be greater than offer\"\n        );\n        require(\n            newPriceOffer < nft.price,\n            \"Marketplace: Price must be less than NFT price\"\n        );\n        require(\n            offer.expirationDate >= block.timestamp,\n            \"Marketplace: Offer expired\"\n        );\n        require(\n            msg.sender == nft.seller,\n            \"Marketplace: You aren't selling the NFT\"\n        );\n        require(\n            _hasNotCounteroffer(offer),\n            \"Marketplace: Counteroffer already exists\"\n        );\n    }\n\n    function _hasNotCounteroffer(\n        Offer storage offer\n    ) private view returns (bool) {\n        return offer.counterofferId == NO_COUNTER_OFFER;\n    }\n\n    function _saveCounteroffer(\n        address collection,\n        uint256 nftId,\n        uint256 offerId,\n        uint256 newPrice,\n        uint64 durationInDays,\n        Offer storage offer\n    ) private returns (uint256 counterofferId) {\n        counteroffers.push(\n            Counteroffer({\n                collection: collection,\n                nftId: nftId,\n                offerId: offerId,\n                price: newPrice,\n                expirationDate: uint64(block.timestamp) +\n                    durationInDays *\n                    ONE_DAY_IN_SECONDS\n            })\n        );\n\n        counterofferId = counteroffers.length;\n        offer.counterofferId = counterofferId;\n    }\n\n    function getCounteroffer(\n        address collection,\n        uint256 nftId,\n        uint256 offerId\n    ) external view returns (Counteroffer memory) {\n        Offer memory offer = getOffer(collection, nftId, offerId);\n        return _getCounterOfferById(offer.counterofferId);\n    }\n\n    function _getCounterOfferById(\n        uint256 id\n    ) private view returns (Counteroffer memory) {\n        return counteroffers[id - 1];\n    }\n\n    function getOffer(\n        address collection,\n        uint256 nftId,\n        uint256 offerId\n    ) public view returns (Offer memory) {\n        return nftsListed[collection][nftId].offers[offerId];\n    }\n\n    function takeCounteroffer(uint256 id) external payable override {\n        _takeCounterofferRequirements(id);\n\n        Offer memory offer = _getOfferByCounterofferId(id);\n        Counteroffer memory counteroffer = _getCounterOfferById(id);\n        NFTForSale storage nft = nftsListed[counteroffer.collection][\n            counteroffer.nftId\n        ];\n        address seller = nft.seller;\n\n        nft.listed = false;\n        _transferRemainingToSender(offer.price + msg.value, counteroffer.price);\n        _payingBenefits(seller, counteroffer.price);\n        _transferNftToSender(counteroffer.collection, counteroffer.nftId);\n\n        emit NFTSold(\n            msg.sender,\n            seller,\n            counteroffer.collection,\n            counteroffer.nftId,\n            counteroffer.price\n        );\n        emit CounterofferTaken(id, counteroffer.price, seller);\n    }\n\n    function _takeCounterofferRequirements(uint256 id) private view {\n        require(id > 0, \"Marketplace: Counteroffer not found\");\n        require(\n            id <= counteroffers.length,\n            \"Marketplace: Counteroffer not found\"\n        );\n        Offer memory offer = _getOfferByCounterofferId(id);\n        require(\n            offer.buyer == msg.sender,\n            \"Marketplace: You didn't make the offer\"\n        );\n        Counteroffer memory counteroffer = _getCounterOfferById(id);\n        require(\n            counteroffer.expirationDate > block.timestamp,\n            \"Marketplace: Counteroffer expired\"\n        );\n        require(\n            offer.price + msg.value >= counteroffer.price,\n            \"Marketplace: Insufficient funds\"\n        );\n    }\n\n    function _getOfferByCounterofferId(\n        uint256 id\n    ) private view returns (Offer memory) {\n        Counteroffer memory counteroffer = _getCounterOfferById(id);\n        address collection = counteroffer.collection;\n        uint256 nftId = counteroffer.nftId;\n        uint256 offerId = counteroffer.offerId;\n\n        return getOffer(collection, nftId, offerId);\n    }\n\n    function _transferNftToSender(address collection, uint256 nftId) private {\n        IERC1155 ierc1155 = IERC1155(collection);\n        ierc1155.safeTransferFrom(\n            address(this),\n            msg.sender,\n            nftId,\n            ONE_COPY,\n            \"\"\n        );\n    }\n\n    function changePriceOf(\n        address collection,\n        uint256 tokenId,\n        uint256 newPrice\n    ) external override {\n        NFTForSale storage nft = nftsListed[collection][tokenId];\n        _changePriceRequirements(nft, newPrice);\n\n        nft.price = newPrice;\n\n        emit NFTPriceChanged(collection, tokenId, newPrice);\n    }\n\n    function _changePriceRequirements(\n        NFTForSale storage nft,\n        uint256 newPrice\n    ) private view {\n        require(nft.listed, \"Marketplace: NFT not listed\");\n        require(\n            msg.sender == nft.seller,\n            \"Marketplace: You aren't selling the NFT\"\n        );\n        require(\n            newPrice != nft.price,\n            \"Marketplace: New price is the same as current price\"\n        );\n    }\n\n    function setFloorRatioFromPercentage(uint8 percentage) external onlyOwner {\n        require(\n            percentage <= 100,\n            \"Marketplace: Percentage must be less or equal than 100\"\n        );\n\n        int128 newFloorRatio = MathFees._npercent(int128(uint128(percentage)));\n        require(\n            newFloorRatio != floorRatio,\n            \"Marketplace: New percentage is the same as the current one\"\n        );\n\n        floorRatio = newFloorRatio;\n    }\n\n    function getNftInfo(\n        address collection,\n        uint256 tokenId\n    ) external view returns (NftInfo memory) {\n        NFTForSale storage nft = nftsListed[collection][tokenId];\n        return\n            NftInfo({\n                listed: nft.listed,\n                price: nft.price,\n                seller: nft.seller,\n                totalOffers: nft.totalOffers\n            });\n    }\n}\n"
    },
    "contracts/MockERC1155Collection.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\n\npragma solidity ^0.8.0;\n\nimport {ERC1155} from \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MockERC1155Collection is ERC1155, Ownable {\n    constructor(uint256[] memory ids, uint256[] memory copies) ERC1155(\"\") {\n        _mintBatch(_msgSender(), ids, copies, \"\");\n    }\n\n    function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public onlyOwner {\n        _mint(account, id, amount, data);\n    }\n\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public onlyOwner {\n        _mintBatch(to, ids, amounts, data);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}