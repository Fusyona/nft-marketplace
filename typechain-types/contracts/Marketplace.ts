/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IMarketplace {
  export type CounterofferStruct = {
    collection: PromiseOrValue<string>;
    nftId: PromiseOrValue<BigNumberish>;
    offerId: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    expirationDate: PromiseOrValue<BigNumberish>;
  };

  export type CounterofferStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    collection: string;
    nftId: BigNumber;
    offerId: BigNumber;
    price: BigNumber;
    expirationDate: BigNumber;
  };

  export type NftInfoStruct = {
    listed: PromiseOrValue<boolean>;
    price: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    totalOffers: PromiseOrValue<BigNumberish>;
  };

  export type NftInfoStructOutput = [boolean, BigNumber, string, BigNumber] & {
    listed: boolean;
    price: BigNumber;
    seller: string;
    totalOffers: BigNumber;
  };

  export type OfferStruct = {
    isInitialized: PromiseOrValue<boolean>;
    buyer: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    expirationDate: PromiseOrValue<BigNumberish>;
    counterofferId: PromiseOrValue<BigNumberish>;
  };

  export type OfferStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    isInitialized: boolean;
    buyer: string;
    price: BigNumber;
    expirationDate: BigNumber;
    counterofferId: BigNumber;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "buy(address,uint256)": FunctionFragment;
    "cancelOffer(address,uint256,uint256)": FunctionFragment;
    "changePriceOf(address,uint256,uint256)": FunctionFragment;
    "feeRatio()": FunctionFragment;
    "floorRatio()": FunctionFragment;
    "fusyBenefitsAccumulated()": FunctionFragment;
    "getCounteroffer(uint256)": FunctionFragment;
    "getCounteroffer(address,uint256,uint256)": FunctionFragment;
    "getFusyonaFeeFor(uint256)": FunctionFragment;
    "getNftInfo(address,uint256)": FunctionFragment;
    "getOffer(address,uint256,uint256)": FunctionFragment;
    "isListed(address,uint256)": FunctionFragment;
    "list(address,uint256,uint256)": FunctionFragment;
    "makeCounteroffer(address,uint256,uint256,uint256,uint64)": FunctionFragment;
    "minPriceOffer(address,uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyInfo(address,uint256,uint256)": FunctionFragment;
    "setFeeRatioFromPercentage(uint8)": FunctionFragment;
    "setFloorRatioFromPercentage(uint8)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "supportsRoyalties(address)": FunctionFragment;
    "takeCounteroffer(uint256)": FunctionFragment;
    "takeOffer(address,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buy"
      | "cancelOffer"
      | "changePriceOf"
      | "feeRatio"
      | "floorRatio"
      | "fusyBenefitsAccumulated"
      | "getCounteroffer(uint256)"
      | "getCounteroffer(address,uint256,uint256)"
      | "getFusyonaFeeFor"
      | "getNftInfo"
      | "getOffer"
      | "isListed"
      | "list"
      | "makeCounteroffer"
      | "minPriceOffer"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "renounceOwnership"
      | "royaltyInfo"
      | "setFeeRatioFromPercentage"
      | "setFloorRatioFromPercentage"
      | "supportsInterface"
      | "supportsRoyalties"
      | "takeCounteroffer"
      | "takeOffer"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changePriceOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "feeRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "floorRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fusyBenefitsAccumulated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCounteroffer(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCounteroffer(address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFusyonaFeeFor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isListed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeCounteroffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minPriceOffer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRatioFromPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFloorRatioFromPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsRoyalties",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeCounteroffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePriceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "floorRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fusyBenefitsAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCounteroffer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCounteroffer(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFusyonaFeeFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNftInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isListed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeCounteroffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPriceOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRatioFromPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFloorRatioFromPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeCounteroffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CancelledOffer(address,uint256,uint256,uint256,address)": EventFragment;
    "CounterofferMade(address,uint256,uint256,uint256)": EventFragment;
    "CounterofferTaken(uint256,uint256,address)": EventFragment;
    "NFTListed(address,address,uint256,uint256)": EventFragment;
    "NFTPriceChanged(address,uint256,uint256)": EventFragment;
    "NFTSold(address,address,address,uint256,uint256)": EventFragment;
    "OfferMade(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RootWithdrawal(address,uint256)": EventFragment;
    "RoyaltyPayment(address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelledOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CounterofferMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CounterofferTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyPayment"): EventFragment;
}

export interface CancelledOfferEventObject {
  collection: string;
  tokenId: BigNumber;
  indexOfOfferMapping: BigNumber;
  priceOffer: BigNumber;
  buyer: string;
}
export type CancelledOfferEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  CancelledOfferEventObject
>;

export type CancelledOfferEventFilter = TypedEventFilter<CancelledOfferEvent>;

export interface CounterofferMadeEventObject {
  collection: string;
  nftId: BigNumber;
  offerId: BigNumber;
  counterofferId: BigNumber;
}
export type CounterofferMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  CounterofferMadeEventObject
>;

export type CounterofferMadeEventFilter =
  TypedEventFilter<CounterofferMadeEvent>;

export interface CounterofferTakenEventObject {
  id: BigNumber;
  price: BigNumber;
  seller: string;
}
export type CounterofferTakenEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  CounterofferTakenEventObject
>;

export type CounterofferTakenEventFilter =
  TypedEventFilter<CounterofferTakenEvent>;

export interface NFTListedEventObject {
  seller: string;
  collection: string;
  nftId: BigNumber;
  price: BigNumber;
}
export type NFTListedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  NFTListedEventObject
>;

export type NFTListedEventFilter = TypedEventFilter<NFTListedEvent>;

export interface NFTPriceChangedEventObject {
  collection: string;
  nftId: BigNumber;
  newPrice: BigNumber;
}
export type NFTPriceChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NFTPriceChangedEventObject
>;

export type NFTPriceChangedEventFilter = TypedEventFilter<NFTPriceChangedEvent>;

export interface NFTSoldEventObject {
  buyer: string;
  seller: string;
  collection: string;
  nftId: BigNumber;
  price: BigNumber;
}
export type NFTSoldEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  NFTSoldEventObject
>;

export type NFTSoldEventFilter = TypedEventFilter<NFTSoldEvent>;

export interface OfferMadeEventObject {
  buyer: string;
  collection: string;
  nftId: BigNumber;
  offerId: BigNumber;
}
export type OfferMadeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  OfferMadeEventObject
>;

export type OfferMadeEventFilter = TypedEventFilter<OfferMadeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RootWithdrawalEventObject {
  beneficiary: string;
  amount: BigNumber;
}
export type RootWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  RootWithdrawalEventObject
>;

export type RootWithdrawalEventFilter = TypedEventFilter<RootWithdrawalEvent>;

export interface RoyaltyPaymentEventObject {
  collection: string;
  tokenId: BigNumber;
  beneficiary: string;
  royalty: BigNumber;
}
export type RoyaltyPaymentEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  RoyaltyPaymentEventObject
>;

export type RoyaltyPaymentEventFilter = TypedEventFilter<RoyaltyPaymentEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buy(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      indexOfOfferMapping: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changePriceOf(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    floorRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    fusyBenefitsAccumulated(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCounteroffer(uint256)"(
      counterofferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarketplace.CounterofferStructOutput]>;

    "getCounteroffer(address,uint256,uint256)"(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarketplace.CounterofferStructOutput]>;

    getFusyonaFeeFor(
      netPayment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNftInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarketplace.NftInfoStructOutput]>;

    getOffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarketplace.OfferStructOutput]>;

    isListed(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    list(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeCounteroffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minPriceOffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setFeeRatioFromPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFloorRatioFromPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsRoyalties(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    takeCounteroffer(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      indexOfOfferMapping: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buy(
    collection: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    indexOfOfferMapping: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changePriceOf(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  floorRatio(overrides?: CallOverrides): Promise<BigNumber>;

  fusyBenefitsAccumulated(overrides?: CallOverrides): Promise<BigNumber>;

  "getCounteroffer(uint256)"(
    counterofferId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.CounterofferStructOutput>;

  "getCounteroffer(address,uint256,uint256)"(
    collection: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.CounterofferStructOutput>;

  getFusyonaFeeFor(
    netPayment: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNftInfo(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.NftInfoStructOutput>;

  getOffer(
    collection: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.OfferStructOutput>;

  isListed(
    collection: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  list(
    collection: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeCounteroffer(
    collection: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    offerId: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    durationInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minPriceOffer(
    collection: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    collection: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    salePrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  setFeeRatioFromPercentage(
    percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFloorRatioFromPercentage(
    percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsRoyalties(
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  takeCounteroffer(
    id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeOffer(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    indexOfOfferMapping: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      indexOfOfferMapping: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changePriceOf(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    floorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    fusyBenefitsAccumulated(overrides?: CallOverrides): Promise<BigNumber>;

    "getCounteroffer(uint256)"(
      counterofferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.CounterofferStructOutput>;

    "getCounteroffer(address,uint256,uint256)"(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.CounterofferStructOutput>;

    getFusyonaFeeFor(
      netPayment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.NftInfoStructOutput>;

    getOffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.OfferStructOutput>;

    isListed(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    list(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeCounteroffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    minPriceOffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyInfo(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setFeeRatioFromPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFloorRatioFromPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsRoyalties(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    takeCounteroffer(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      indexOfOfferMapping: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CancelledOffer(address,uint256,uint256,uint256,address)"(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      indexOfOfferMapping?: null,
      priceOffer?: null,
      buyer?: PromiseOrValue<string> | null
    ): CancelledOfferEventFilter;
    CancelledOffer(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      indexOfOfferMapping?: null,
      priceOffer?: null,
      buyer?: PromiseOrValue<string> | null
    ): CancelledOfferEventFilter;

    "CounterofferMade(address,uint256,uint256,uint256)"(
      collection?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      counterofferId?: null
    ): CounterofferMadeEventFilter;
    CounterofferMade(
      collection?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      counterofferId?: null
    ): CounterofferMadeEventFilter;

    "CounterofferTaken(uint256,uint256,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      seller?: PromiseOrValue<string> | null
    ): CounterofferTakenEventFilter;
    CounterofferTaken(
      id?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      seller?: PromiseOrValue<string> | null
    ): CounterofferTakenEventFilter;

    "NFTListed(address,address,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      nftId?: null,
      price?: null
    ): NFTListedEventFilter;
    NFTListed(
      seller?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      nftId?: null,
      price?: null
    ): NFTListedEventFilter;

    "NFTPriceChanged(address,uint256,uint256)"(
      collection?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      newPrice?: null
    ): NFTPriceChangedEventFilter;
    NFTPriceChanged(
      collection?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      newPrice?: null
    ): NFTPriceChangedEventFilter;

    "NFTSold(address,address,address,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      nftId?: null,
      price?: null
    ): NFTSoldEventFilter;
    NFTSold(
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      nftId?: null,
      price?: null
    ): NFTSoldEventFilter;

    "OfferMade(address,address,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      offerId?: null
    ): OfferMadeEventFilter;
    OfferMade(
      buyer?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      offerId?: null
    ): OfferMadeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RootWithdrawal(address,uint256)"(
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): RootWithdrawalEventFilter;
    RootWithdrawal(
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): RootWithdrawalEventFilter;

    "RoyaltyPayment(address,uint256,address,uint256)"(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      beneficiary?: PromiseOrValue<string> | null,
      royalty?: null
    ): RoyaltyPaymentEventFilter;
    RoyaltyPayment(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      beneficiary?: PromiseOrValue<string> | null,
      royalty?: null
    ): RoyaltyPaymentEventFilter;
  };

  estimateGas: {
    buy(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      indexOfOfferMapping: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changePriceOf(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    floorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    fusyBenefitsAccumulated(overrides?: CallOverrides): Promise<BigNumber>;

    "getCounteroffer(uint256)"(
      counterofferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCounteroffer(address,uint256,uint256)"(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFusyonaFeeFor(
      netPayment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isListed(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeCounteroffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minPriceOffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltyInfo(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeRatioFromPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFloorRatioFromPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsRoyalties(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takeCounteroffer(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      indexOfOfferMapping: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      indexOfOfferMapping: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changePriceOf(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floorRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fusyBenefitsAccumulated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCounteroffer(uint256)"(
      counterofferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCounteroffer(address,uint256,uint256)"(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFusyonaFeeFor(
      netPayment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isListed(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    list(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeCounteroffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minPriceOffer(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      collection: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeRatioFromPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFloorRatioFromPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsRoyalties(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takeCounteroffer(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      indexOfOfferMapping: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
